/*! For license information please see main.2e385c3da304d70b5f9c.js.LICENSE.txt */
(()=>{var e={958:()=>{var e=document.getElementById("switch-theme"),t=document.querySelector("body");e.checked?(t.classList.remove("theme-light"),t.classList.add("theme-dark")):(t.classList.remove("theme-dark"),t.classList.add("theme-light")),e.addEventListener("change",(function(i){e.checked?(t.classList.remove("theme-light"),t.classList.add("theme-dark")):(t.classList.remove("theme-dark"),t.classList.add("theme-light"))}));var i=document.getElementById("hamburger-button"),n=document.querySelector("#navbar-main");i.checked?n.classList.add("full-screen"):n.classList.remove("full-sreen"),i.addEventListener("change",(function(e){i.checked?n.classList.add("full-screen"):n.classList.remove("full-screen")})),document.querySelector(".custom-nav-group").addEventListener("click",(function(e){var t,n,s;e.target.classList.contains("nav-link")&&i.checked&&(t=0,n=window.scrollX,s=window.scrollY,new Promise((function(e){!function i(o){o>=500||o-t>20?e():(window.scrollX==n&&window.scrollY==s||(t=o,n=window.scrollX,s=window.scrollY),requestAnimationFrame(i.bind(null,o+1)))}(0)}))).then((function(){i.click()}))}))},607:()=>{document.querySelectorAll(".hero-text-group").forEach((function(e){var t=e.querySelector(".find-me");e.addEventListener("click",(function(e){e.target.classList.contains("find-me")&&!t.classList.contains("expand")?t.classList.add("expand"):e.target.classList.contains("find-me")||t.classList.remove("expand")}))})),new MutationObserver((function(e){e.forEach((function(e){"class"===e.attributeName&&(document.querySelector(".hook-logo").classList.contains("active")?document.querySelector(".logo").classList.remove("logo-fixed"):document.querySelector(".logo").classList.add("logo-fixed"))}))})).observe(document.querySelector(".hook-logo"),{attributes:!0})},904:(e,t,i)=>{"use strict";e.exports=i.p+"avatar-about.dd144bd6ca1efae261b3.png"},239:(e,t,i)=>{"use strict";e.exports=i.p+"logo-nati.8fc21720d55d31c9e29d.svg"},611:(e,t,i)=>{"use strict";e.exports=i.p+"desktop.04eb1de450d6e1eb853f.jpg"},265:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1.5f6a1d7914806734bf56.jpg"},387:(e,t,i)=>{"use strict";e.exports=i.p+"desktop.78546e56c37cb3687005.jpg"},736:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1.bc535b25519122011a52.jpg"},843:(e,t,i)=>{"use strict";e.exports=i.p+"desktop.1781815729180b0f2ee2.jpg"},179:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1.72e305c1e3ecff51c396.jpg"},973:(e,t,i)=>{"use strict";e.exports=i.p+"desktop.6fb82d29c4d7ccd65aca.jpg"},616:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1.891bfcf24bc46ce2ae87.jpg"},457:(e,t,i)=>{"use strict";e.exports=i.p+"desktop-dark.aea532c68b05e2189458.jpg"},927:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1-light.aa8792481d67b29b1539.jpg"},766:(e,t,i)=>{"use strict";e.exports=i.p+"desktop.9a2e84e64aa1a261dbd1.jpg"},752:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1.de98dd045561260c5bfe.jpg"},78:(e,t,i)=>{"use strict";e.exports=i.p+"desktop.c881d5a5e91805e9c5cf.jpg"},35:(e,t,i)=>{"use strict";e.exports=i.p+"mobile-1.d06f1ca799fef27914e6.jpg"},306:(e,t,i)=>{"use strict";e.exports=i.p+"profile-cut.b1686ee6f78c51b4c5ec.png"}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{"use strict";var e={};i.r(e),i.d(e,{afterMain:()=>w,afterRead:()=>b,afterWrite:()=>T,applyStyles:()=>D,arrow:()=>X,auto:()=>r,basePlacements:()=>a,beforeMain:()=>v,beforeRead:()=>g,beforeWrite:()=>E,bottom:()=>n,clippingParents:()=>h,computeStyles:()=>Z,createPopper:()=>Oe,createPopperBase:()=>Ce,createPopperLite:()=>xe,detectOverflow:()=>fe,end:()=>c,eventListeners:()=>te,flip:()=>me,hide:()=>be,left:()=>o,main:()=>y,modifierPhases:()=>L,offset:()=>ve,placements:()=>m,popper:()=>u,popperGenerator:()=>ke,popperOffsets:()=>ye,preventOverflow:()=>we,read:()=>_,reference:()=>p,right:()=>s,start:()=>l,top:()=>t,variationPlacements:()=>f,viewport:()=>d,write:()=>A});var t="top",n="bottom",s="right",o="left",r="auto",a=[t,n,s,o],l="start",c="end",h="clippingParents",d="viewport",u="popper",p="reference",f=a.reduce((function(e,t){return e.concat([t+"-"+l,t+"-"+c])}),[]),m=[].concat(a,[r]).reduce((function(e,t){return e.concat([t,t+"-"+l,t+"-"+c])}),[]),g="beforeRead",_="read",b="afterRead",v="beforeMain",y="main",w="afterMain",E="beforeWrite",A="write",T="afterWrite",L=[g,_,b,v,y,w,E,A,T];function k(e){return e?(e.nodeName||"").toLowerCase():null}function C(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function O(e){return e instanceof C(e).Element||e instanceof Element}function x(e){return e instanceof C(e).HTMLElement||e instanceof HTMLElement}function S(e){return"undefined"!=typeof ShadowRoot&&(e instanceof C(e).ShadowRoot||e instanceof ShadowRoot)}const D={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},n=t.attributes[e]||{},s=t.elements[e];x(s)&&k(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(e){var t=n[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],s=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});x(n)&&k(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};function I(e){return e.split("-")[0]}function N(e,t){void 0===t&&(t=!1);var i=e.getBoundingClientRect();return{width:i.width/1,height:i.height/1,top:i.top/1,right:i.right/1,bottom:i.bottom/1,left:i.left/1,x:i.left/1,y:i.top/1}}function j(e){var t=N(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}function P(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&S(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function M(e){return C(e).getComputedStyle(e)}function H(e){return["table","td","th"].indexOf(k(e))>=0}function B(e){return((O(e)?e.ownerDocument:e.document)||window.document).documentElement}function q(e){return"html"===k(e)?e:e.assignedSlot||e.parentNode||(S(e)?e.host:null)||B(e)}function R(e){return x(e)&&"fixed"!==M(e).position?e.offsetParent:null}function W(e){for(var t=C(e),i=R(e);i&&H(i)&&"static"===M(i).position;)i=R(i);return i&&("html"===k(i)||"body"===k(i)&&"static"===M(i).position)?t:i||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&x(e)&&"fixed"===M(e).position)return null;for(var i=q(e);x(i)&&["html","body"].indexOf(k(i))<0;){var n=M(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(e)||t}function $(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}var z=Math.max,F=Math.min,U=Math.round;function V(e,t,i){return z(e,F(t,i))}function Y(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function K(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}const X={name:"arrow",enabled:!0,phase:"main",fn:function(e){var i,r=e.state,l=e.name,c=e.options,h=r.elements.arrow,d=r.modifiersData.popperOffsets,u=I(r.placement),p=$(u),f=[o,s].indexOf(u)>=0?"height":"width";if(h&&d){var m=function(e,t){return Y("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:K(e,a))}(c.padding,r),g=j(h),_="y"===p?t:o,b="y"===p?n:s,v=r.rects.reference[f]+r.rects.reference[p]-d[p]-r.rects.popper[f],y=d[p]-r.rects.reference[p],w=W(h),E=w?"y"===p?w.clientHeight||0:w.clientWidth||0:0,A=v/2-y/2,T=m[_],L=E-g[f]-m[b],k=E/2-g[f]/2+A,C=V(T,k,L),O=p;r.modifiersData[l]=((i={})[O]=C,i.centerOffset=C-k,i)}},effect:function(e){var t=e.state,i=e.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&P(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Q(e){return e.split("-")[1]}var G={top:"auto",right:"auto",bottom:"auto",left:"auto"};function J(e){var i,r=e.popper,a=e.popperRect,l=e.placement,h=e.variation,d=e.offsets,u=e.position,p=e.gpuAcceleration,f=e.adaptive,m=e.roundOffsets,g=!0===m?function(e){var t=e.x,i=e.y,n=window.devicePixelRatio||1;return{x:U(U(t*n)/n)||0,y:U(U(i*n)/n)||0}}(d):"function"==typeof m?m(d):d,_=g.x,b=void 0===_?0:_,v=g.y,y=void 0===v?0:v,w=d.hasOwnProperty("x"),E=d.hasOwnProperty("y"),A=o,T=t,L=window;if(f){var k=W(r),O="clientHeight",x="clientWidth";k===C(r)&&"static"!==M(k=B(r)).position&&"absolute"===u&&(O="scrollHeight",x="scrollWidth"),k=k,l!==t&&(l!==o&&l!==s||h!==c)||(T=n,y-=k[O]-a.height,y*=p?1:-1),l!==o&&(l!==t&&l!==n||h!==c)||(A=s,b-=k[x]-a.width,b*=p?1:-1)}var S,D=Object.assign({position:u},f&&G);return p?Object.assign({},D,((S={})[T]=E?"0":"",S[A]=w?"0":"",S.transform=(L.devicePixelRatio||1)<=1?"translate("+b+"px, "+y+"px)":"translate3d("+b+"px, "+y+"px, 0)",S)):Object.assign({},D,((i={})[T]=E?y+"px":"",i[A]=w?b+"px":"",i.transform="",i))}const Z={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:I(t.placement),variation:Q(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,J(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,J(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ee={passive:!0};const te={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,n=e.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=C(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",i.update,ee)})),a&&l.addEventListener("resize",i.update,ee),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",i.update,ee)})),a&&l.removeEventListener("resize",i.update,ee)}},data:{}};var ie={left:"right",right:"left",bottom:"top",top:"bottom"};function ne(e){return e.replace(/left|right|bottom|top/g,(function(e){return ie[e]}))}var se={start:"end",end:"start"};function oe(e){return e.replace(/start|end/g,(function(e){return se[e]}))}function re(e){var t=C(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ae(e){return N(B(e)).left+re(e).scrollLeft}function le(e){var t=M(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function ce(e){return["html","body","#document"].indexOf(k(e))>=0?e.ownerDocument.body:x(e)&&le(e)?e:ce(q(e))}function he(e,t){var i;void 0===t&&(t=[]);var n=ce(e),s=n===(null==(i=e.ownerDocument)?void 0:i.body),o=C(n),r=s?[o].concat(o.visualViewport||[],le(n)?n:[]):n,a=t.concat(r);return s?a:a.concat(he(q(r)))}function de(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ue(e,t){return t===d?de(function(e){var t=C(e),i=B(e),n=t.visualViewport,s=i.clientWidth,o=i.clientHeight,r=0,a=0;return n&&(s=n.width,o=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=n.offsetLeft,a=n.offsetTop)),{width:s,height:o,x:r+ae(e),y:a}}(e)):x(t)?function(e){var t=N(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):de(function(e){var t,i=B(e),n=re(e),s=null==(t=e.ownerDocument)?void 0:t.body,o=z(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=z(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ae(e),l=-n.scrollTop;return"rtl"===M(s||i).direction&&(a+=z(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(B(e)))}function pe(e){var i,r=e.reference,a=e.element,h=e.placement,d=h?I(h):null,u=h?Q(h):null,p=r.x+r.width/2-a.width/2,f=r.y+r.height/2-a.height/2;switch(d){case t:i={x:p,y:r.y-a.height};break;case n:i={x:p,y:r.y+r.height};break;case s:i={x:r.x+r.width,y:f};break;case o:i={x:r.x-a.width,y:f};break;default:i={x:r.x,y:r.y}}var m=d?$(d):null;if(null!=m){var g="y"===m?"height":"width";switch(u){case l:i[m]=i[m]-(r[g]/2-a[g]/2);break;case c:i[m]=i[m]+(r[g]/2-a[g]/2)}}return i}function fe(e,i){void 0===i&&(i={});var o=i,r=o.placement,l=void 0===r?e.placement:r,c=o.boundary,f=void 0===c?h:c,m=o.rootBoundary,g=void 0===m?d:m,_=o.elementContext,b=void 0===_?u:_,v=o.altBoundary,y=void 0!==v&&v,w=o.padding,E=void 0===w?0:w,A=Y("number"!=typeof E?E:K(E,a)),T=b===u?p:u,L=e.rects.popper,C=e.elements[y?T:b],S=function(e,t,i){var n="clippingParents"===t?function(e){var t=he(q(e)),i=["absolute","fixed"].indexOf(M(e).position)>=0&&x(e)?W(e):e;return O(i)?t.filter((function(e){return O(e)&&P(e,i)&&"body"!==k(e)})):[]}(e):[].concat(t),s=[].concat(n,[i]),o=s[0],r=s.reduce((function(t,i){var n=ue(e,i);return t.top=z(n.top,t.top),t.right=F(n.right,t.right),t.bottom=F(n.bottom,t.bottom),t.left=z(n.left,t.left),t}),ue(e,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(O(C)?C:C.contextElement||B(e.elements.popper),f,g),D=N(e.elements.reference),I=pe({reference:D,element:L,strategy:"absolute",placement:l}),j=de(Object.assign({},L,I)),H=b===u?j:D,R={top:S.top-H.top+A.top,bottom:H.bottom-S.bottom+A.bottom,left:S.left-H.left+A.left,right:H.right-S.right+A.right},$=e.modifiersData.offset;if(b===u&&$){var U=$[l];Object.keys(R).forEach((function(e){var i=[s,n].indexOf(e)>=0?1:-1,o=[t,n].indexOf(e)>=0?"y":"x";R[e]+=U[o]*i}))}return R}const me={name:"flip",enabled:!0,phase:"main",fn:function(e){var i=e.state,c=e.options,h=e.name;if(!i.modifiersData[h]._skip){for(var d=c.mainAxis,u=void 0===d||d,p=c.altAxis,g=void 0===p||p,_=c.fallbackPlacements,b=c.padding,v=c.boundary,y=c.rootBoundary,w=c.altBoundary,E=c.flipVariations,A=void 0===E||E,T=c.allowedAutoPlacements,L=i.options.placement,k=I(L),C=_||(k!==L&&A?function(e){if(I(e)===r)return[];var t=ne(e);return[oe(e),t,oe(t)]}(L):[ne(L)]),O=[L].concat(C).reduce((function(e,t){return e.concat(I(t)===r?function(e,t){void 0===t&&(t={});var i=t,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,l=i.flipVariations,c=i.allowedAutoPlacements,h=void 0===c?m:c,d=Q(n),u=d?l?f:f.filter((function(e){return Q(e)===d})):a,p=u.filter((function(e){return h.indexOf(e)>=0}));0===p.length&&(p=u);var g=p.reduce((function(t,i){return t[i]=fe(e,{placement:i,boundary:s,rootBoundary:o,padding:r})[I(i)],t}),{});return Object.keys(g).sort((function(e,t){return g[e]-g[t]}))}(i,{placement:t,boundary:v,rootBoundary:y,padding:b,flipVariations:A,allowedAutoPlacements:T}):t)}),[]),x=i.rects.reference,S=i.rects.popper,D=new Map,N=!0,j=O[0],P=0;P<O.length;P++){var M=O[P],H=I(M),B=Q(M)===l,q=[t,n].indexOf(H)>=0,R=q?"width":"height",W=fe(i,{placement:M,boundary:v,rootBoundary:y,altBoundary:w,padding:b}),$=q?B?s:o:B?n:t;x[R]>S[R]&&($=ne($));var z=ne($),F=[];if(u&&F.push(W[H]<=0),g&&F.push(W[$]<=0,W[z]<=0),F.every((function(e){return e}))){j=M,N=!1;break}D.set(M,F)}if(N)for(var U=function(e){var t=O.find((function(t){var i=D.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return j=t,"break"},V=A?3:1;V>0&&"break"!==U(V);V--);i.placement!==j&&(i.modifiersData[h]._skip=!0,i.placement=j,i.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ge(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function _e(e){return[t,s,n,o].some((function(t){return e[t]>=0}))}const be={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,n=t.rects.reference,s=t.rects.popper,o=t.modifiersData.preventOverflow,r=fe(t,{elementContext:"reference"}),a=fe(t,{altBoundary:!0}),l=ge(r,n),c=ge(a,s,o),h=_e(l),d=_e(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}},ve={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var i=e.state,n=e.options,r=e.name,a=n.offset,l=void 0===a?[0,0]:a,c=m.reduce((function(e,n){return e[n]=function(e,i,n){var r=I(e),a=[o,t].indexOf(r)>=0?-1:1,l="function"==typeof n?n(Object.assign({},i,{placement:e})):n,c=l[0],h=l[1];return c=c||0,h=(h||0)*a,[o,s].indexOf(r)>=0?{x:h,y:c}:{x:c,y:h}}(n,i.rects,l),e}),{}),h=c[i.placement],d=h.x,u=h.y;null!=i.modifiersData.popperOffsets&&(i.modifiersData.popperOffsets.x+=d,i.modifiersData.popperOffsets.y+=u),i.modifiersData[r]=c}},ye={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=pe({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},we={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var i=e.state,r=e.options,a=e.name,c=r.mainAxis,h=void 0===c||c,d=r.altAxis,u=void 0!==d&&d,p=r.boundary,f=r.rootBoundary,m=r.altBoundary,g=r.padding,_=r.tether,b=void 0===_||_,v=r.tetherOffset,y=void 0===v?0:v,w=fe(i,{boundary:p,rootBoundary:f,padding:g,altBoundary:m}),E=I(i.placement),A=Q(i.placement),T=!A,L=$(E),k="x"===L?"y":"x",C=i.modifiersData.popperOffsets,O=i.rects.reference,x=i.rects.popper,S="function"==typeof y?y(Object.assign({},i.rects,{placement:i.placement})):y,D={x:0,y:0};if(C){if(h||u){var N="y"===L?t:o,P="y"===L?n:s,M="y"===L?"height":"width",H=C[L],B=C[L]+w[N],q=C[L]-w[P],R=b?-x[M]/2:0,U=A===l?O[M]:x[M],Y=A===l?-x[M]:-O[M],K=i.elements.arrow,X=b&&K?j(K):{width:0,height:0},G=i.modifiersData["arrow#persistent"]?i.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},J=G[N],Z=G[P],ee=V(0,O[M],X[M]),te=T?O[M]/2-R-ee-J-S:U-ee-J-S,ie=T?-O[M]/2+R+ee+Z+S:Y+ee+Z+S,ne=i.elements.arrow&&W(i.elements.arrow),se=ne?"y"===L?ne.clientTop||0:ne.clientLeft||0:0,oe=i.modifiersData.offset?i.modifiersData.offset[i.placement][L]:0,re=C[L]+te-oe-se,ae=C[L]+ie-oe;if(h){var le=V(b?F(B,re):B,H,b?z(q,ae):q);C[L]=le,D[L]=le-H}if(u){var ce="x"===L?t:o,he="x"===L?n:s,de=C[k],ue=de+w[ce],pe=de-w[he],me=V(b?F(ue,re):ue,de,b?z(pe,ae):pe);C[k]=me,D[k]=me-de}}i.modifiersData[a]=D}},requiresIfExists:["offset"]};function Ee(e,t,i){void 0===i&&(i=!1);var n,s,o=x(t),r=x(t)&&function(e){var t=e.getBoundingClientRect(),i=t.width/e.offsetWidth||1,n=t.height/e.offsetHeight||1;return 1!==i||1!==n}(t),a=B(t),l=N(e,r),c={scrollLeft:0,scrollTop:0},h={x:0,y:0};return(o||!o&&!i)&&(("body"!==k(t)||le(a))&&(c=(n=t)!==C(n)&&x(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:re(n)),x(t)?((h=N(t,!0)).x+=t.clientLeft,h.y+=t.clientTop):a&&(h.x=ae(a))),{x:l.left+c.scrollLeft-h.x,y:l.top+c.scrollTop-h.y,width:l.width,height:l.height}}function Ae(e){var t=new Map,i=new Set,n=[];function s(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!i.has(e)){var n=t.get(e);n&&s(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||s(e)})),n}var Te={placement:"bottom",modifiers:[],strategy:"absolute"};function Le(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function ke(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,n=void 0===i?[]:i,s=t.defaultOptions,o=void 0===s?Te:s;return function(e,t,i){void 0===i&&(i=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Te,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,h={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;d(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:O(e)?he(e):e.contextElement?he(e.contextElement):[],popper:he(t)};var r,c,u=function(e){var t=Ae(e);return L.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}((r=[].concat(n,a.options.modifiers),c=r.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=u.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,n=void 0===i?{}:i,s=e.effect;if("function"==typeof s){var o=s({state:a,name:t,instance:h,options:n});l.push(o||function(){})}})),h.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,i=e.popper;if(Le(t,i)){a.rects={reference:Ee(t,W(i),"fixed"===a.options.strategy),popper:j(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],o=s.fn,r=s.options,l=void 0===r?{}:r,d=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:d,instance:h})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(e){h.forceUpdate(),e(a)}))},function(){return r||(r=new Promise((function(e){Promise.resolve().then((function(){r=void 0,e(s())}))}))),r}),destroy:function(){d(),c=!0}};if(!Le(e,t))return h;function d(){l.forEach((function(e){return e()})),l=[]}return h.setOptions(i).then((function(e){!c&&i.onFirstUpdate&&i.onFirstUpdate(e)})),h}}var Ce=ke(),Oe=ke({defaultModifiers:[te,ye,Z,D,ve,me,we,X,be]}),xe=ke({defaultModifiers:[te,ye,Z,D]});const Se="transitionend",De=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let i=e.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),t=i&&"#"!==i?i.trim():null}return t},Ie=e=>{const t=De(e);return t&&document.querySelector(t)?t:null},Ne=e=>{const t=De(e);return t?document.querySelector(t):null},je=e=>{e.dispatchEvent(new Event(Se))},Pe=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),Me=e=>Pe(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,He=(e,t,i)=>{Object.keys(i).forEach((n=>{const s=i[n],o=t[n],r=o&&Pe(o)?"element":null==(a=o)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(s).test(r))throw new TypeError(`${e.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${s}".`)}))},Be=e=>!(!Pe(e)||0===e.getClientRects().length)&&"visible"===getComputedStyle(e).getPropertyValue("visibility"),qe=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),Re=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?Re(e.parentNode):null},We=()=>{},$e=e=>{e.offsetHeight},ze=()=>{const{jQuery:e}=window;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},Fe=[],Ue=()=>"rtl"===document.documentElement.dir,Ve=e=>{var t;t=()=>{const t=ze();if(t){const i=e.NAME,n=t.fn[i];t.fn[i]=e.jQueryInterface,t.fn[i].Constructor=e,t.fn[i].noConflict=()=>(t.fn[i]=n,e.jQueryInterface)}},"loading"===document.readyState?(Fe.length||document.addEventListener("DOMContentLoaded",(()=>{Fe.forEach((e=>e()))})),Fe.push(t)):t()},Ye=e=>{"function"==typeof e&&e()},Ke=(e,t,i=!0)=>{if(!i)return void Ye(e);const n=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:i}=window.getComputedStyle(e);const n=Number.parseFloat(t),s=Number.parseFloat(i);return n||s?(t=t.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(i))):0})(t)+5;let s=!1;const o=({target:i})=>{i===t&&(s=!0,t.removeEventListener(Se,o),Ye(e))};t.addEventListener(Se,o),setTimeout((()=>{s||je(t)}),n)},Xe=(e,t,i,n)=>{let s=e.indexOf(t);if(-1===s)return e[!i&&n?e.length-1:0];const o=e.length;return s+=i?1:-1,n&&(s=(s+o)%o),e[Math.max(0,Math.min(s,o-1))]},Qe=/[^.]*(?=\..*)\.|.*/,Ge=/\..*/,Je=/::\d+$/,Ze={};let et=1;const tt={mouseenter:"mouseover",mouseleave:"mouseout"},it=/^(mouseenter|mouseleave)/i,nt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function st(e,t){return t&&`${t}::${et++}`||e.uidEvent||et++}function ot(e){const t=st(e);return e.uidEvent=t,Ze[t]=Ze[t]||{},Ze[t]}function rt(e,t,i=null){const n=Object.keys(e);for(let s=0,o=n.length;s<o;s++){const o=e[n[s]];if(o.originalHandler===t&&o.delegationSelector===i)return o}return null}function at(e,t,i){const n="string"==typeof t,s=n?i:t;let o=ht(e);return nt.has(o)||(o=e),[n,s,o]}function lt(e,t,i,n,s){if("string"!=typeof t||!e)return;if(i||(i=n,n=null),it.test(t)){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};n?n=e(n):i=e(i)}const[o,r,a]=at(t,i,n),l=ot(e),c=l[a]||(l[a]={}),h=rt(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=st(r,t.replace(Qe,"")),u=o?function(e,t,i){return function n(s){const o=e.querySelectorAll(t);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(let a=o.length;a--;)if(o[a]===r)return s.delegateTarget=r,n.oneOff&&dt.off(e,s.type,t,i),i.apply(r,[s]);return null}}(e,i,n):function(e,t){return function i(n){return n.delegateTarget=e,i.oneOff&&dt.off(e,n.type,t),t.apply(e,[n])}}(e,i);u.delegationSelector=o?i:null,u.originalHandler=r,u.oneOff=s,u.uidEvent=d,c[d]=u,e.addEventListener(a,u,o)}function ct(e,t,i,n,s){const o=rt(t[i],n,s);o&&(e.removeEventListener(i,o,Boolean(s)),delete t[i][o.uidEvent])}function ht(e){return e=e.replace(Ge,""),tt[e]||e}const dt={on(e,t,i,n){lt(e,t,i,n,!1)},one(e,t,i,n){lt(e,t,i,n,!0)},off(e,t,i,n){if("string"!=typeof t||!e)return;const[s,o,r]=at(t,i,n),a=r!==t,l=ot(e),c=t.startsWith(".");if(void 0!==o){if(!l||!l[r])return;return void ct(e,l,r,o,s?i:null)}c&&Object.keys(l).forEach((i=>{!function(e,t,i,n){const s=t[i]||{};Object.keys(s).forEach((o=>{if(o.includes(n)){const n=s[o];ct(e,t,i,n.originalHandler,n.delegationSelector)}}))}(e,l,i,t.slice(1))}));const h=l[r]||{};Object.keys(h).forEach((i=>{const n=i.replace(Je,"");if(!a||t.includes(n)){const t=h[i];ct(e,l,r,t.originalHandler,t.delegationSelector)}}))},trigger(e,t,i){if("string"!=typeof t||!e)return null;const n=ze(),s=ht(t),o=t!==s,r=nt.has(s);let a,l=!0,c=!0,h=!1,d=null;return o&&n&&(a=n.Event(t,i),n(e).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),h=a.isDefaultPrevented()),r?(d=document.createEvent("HTMLEvents"),d.initEvent(s,l,!0)):d=new CustomEvent(t,{bubbles:l,cancelable:!0}),void 0!==i&&Object.keys(i).forEach((e=>{Object.defineProperty(d,e,{get:()=>i[e]})})),h&&d.preventDefault(),c&&e.dispatchEvent(d),d.defaultPrevented&&void 0!==a&&a.preventDefault(),d}},ut=new Map,pt={set(e,t,i){ut.has(e)||ut.set(e,new Map);const n=ut.get(e);n.has(t)||0===n.size?n.set(t,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(e,t)=>ut.has(e)&&ut.get(e).get(t)||null,remove(e,t){if(!ut.has(e))return;const i=ut.get(e);i.delete(t),0===i.size&&ut.delete(e)}};class ft{constructor(e){(e=Me(e))&&(this._element=e,pt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){pt.remove(this._element,this.constructor.DATA_KEY),dt.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((e=>{this[e]=null}))}_queueCallback(e,t,i=!0){Ke(e,t,i)}static getInstance(e){return pt.get(Me(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const mt=(e,t="hide")=>{const i=`click.dismiss${e.EVENT_KEY}`,n=e.NAME;dt.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),qe(this))return;const s=Ne(this)||this.closest(`.${n}`);e.getOrCreateInstance(s)[t]()}))};class gt extends ft{static get NAME(){return"alert"}close(){if(dt.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),dt.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=gt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}mt(gt,"close"),Ve(gt);const _t='[data-bs-toggle="button"]';class bt extends ft{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=bt.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}function vt(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function yt(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}dt.on(document,"click.bs.button.data-api",_t,(e=>{e.preventDefault();const t=e.target.closest(_t);bt.getOrCreateInstance(t).toggle()})),Ve(bt);const wt={setDataAttribute(e,t,i){e.setAttribute(`data-bs-${yt(t)}`,i)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${yt(t)}`)},getDataAttributes(e){if(!e)return{};const t={};return Object.keys(e.dataset).filter((e=>e.startsWith("bs"))).forEach((i=>{let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=vt(e.dataset[i])})),t},getDataAttribute:(e,t)=>vt(e.getAttribute(`data-bs-${yt(t)}`)),offset(e){const t=e.getBoundingClientRect();return{top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:e=>({top:e.offsetTop,left:e.offsetLeft})},Et={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const i=[];let n=e.parentNode;for(;n&&n.nodeType===Node.ELEMENT_NODE&&3!==n.nodeType;)n.matches(t)&&i.push(n),n=n.parentNode;return i},prev(e,t){let i=e.previousElementSibling;for(;i;){if(i.matches(t))return[i];i=i.previousElementSibling}return[]},next(e,t){let i=e.nextElementSibling;for(;i;){if(i.matches(t))return[i];i=i.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(", ");return this.find(t,e).filter((e=>!qe(e)&&Be(e)))}},At="carousel",Tt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Lt={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},kt="next",Ct="prev",Ot="left",xt="right",St={ArrowLeft:xt,ArrowRight:Ot},Dt="slid.bs.carousel",It="active",Nt=".active.carousel-item";class jt extends ft{constructor(e,t){super(e),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=Et.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Tt}static get NAME(){return At}next(){this._slide(kt)}nextWhenVisible(){!document.hidden&&Be(this._element)&&this.next()}prev(){this._slide(Ct)}pause(e){e||(this._isPaused=!0),Et.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(je(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(e){this._activeElement=Et.findOne(Nt,this._element);const t=this._getItemIndex(this._activeElement);if(e>this._items.length-1||e<0)return;if(this._isSliding)return void dt.one(this._element,Dt,(()=>this.to(e)));if(t===e)return this.pause(),void this.cycle();const i=e>t?kt:Ct;this._slide(i,this._items[e])}_getConfig(e){return e={...Tt,...wt.getDataAttributes(this._element),..."object"==typeof e?e:{}},He(At,e,Lt),e}_handleSwipe(){const e=Math.abs(this.touchDeltaX);if(e<=40)return;const t=e/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?xt:Ot)}_addEventListeners(){this._config.keyboard&&dt.on(this._element,"keydown.bs.carousel",(e=>this._keydown(e))),"hover"===this._config.pause&&(dt.on(this._element,"mouseenter.bs.carousel",(e=>this.pause(e))),dt.on(this._element,"mouseleave.bs.carousel",(e=>this.cycle(e)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const e=e=>this._pointerEvent&&("pen"===e.pointerType||"touch"===e.pointerType),t=t=>{e(t)?this.touchStartX=t.clientX:this._pointerEvent||(this.touchStartX=t.touches[0].clientX)},i=e=>{this.touchDeltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this.touchStartX},n=t=>{e(t)&&(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((e=>this.cycle(e)),500+this._config.interval))};Et.find(".carousel-item img",this._element).forEach((e=>{dt.on(e,"dragstart.bs.carousel",(e=>e.preventDefault()))})),this._pointerEvent?(dt.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),dt.on(this._element,"pointerup.bs.carousel",(e=>n(e))),this._element.classList.add("pointer-event")):(dt.on(this._element,"touchstart.bs.carousel",(e=>t(e))),dt.on(this._element,"touchmove.bs.carousel",(e=>i(e))),dt.on(this._element,"touchend.bs.carousel",(e=>n(e))))}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=St[e.key];t&&(e.preventDefault(),this._slide(t))}_getItemIndex(e){return this._items=e&&e.parentNode?Et.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}_getItemByOrder(e,t){const i=e===kt;return Xe(this._items,t,i,this._config.wrap)}_triggerSlideEvent(e,t){const i=this._getItemIndex(e),n=this._getItemIndex(Et.findOne(Nt,this._element));return dt.trigger(this._element,"slide.bs.carousel",{relatedTarget:e,direction:t,from:n,to:i})}_setActiveIndicatorElement(e){if(this._indicatorsElement){const t=Et.findOne(".active",this._indicatorsElement);t.classList.remove(It),t.removeAttribute("aria-current");const i=Et.find("[data-bs-target]",this._indicatorsElement);for(let t=0;t<i.length;t++)if(Number.parseInt(i[t].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){i[t].classList.add(It),i[t].setAttribute("aria-current","true");break}}}_updateInterval(){const e=this._activeElement||Et.findOne(Nt,this._element);if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(e,t){const i=this._directionToOrder(e),n=Et.findOne(Nt,this._element),s=this._getItemIndex(n),o=t||this._getItemByOrder(i,n),r=this._getItemIndex(o),a=Boolean(this._interval),l=i===kt,c=l?"carousel-item-start":"carousel-item-end",h=l?"carousel-item-next":"carousel-item-prev",d=this._orderToDirection(i);if(o&&o.classList.contains(It))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,d).defaultPrevented)return;if(!n||!o)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const u=()=>{dt.trigger(this._element,Dt,{relatedTarget:o,direction:d,from:s,to:r})};if(this._element.classList.contains("slide")){o.classList.add(h),$e(o),n.classList.add(c),o.classList.add(c);const e=()=>{o.classList.remove(c,h),o.classList.add(It),n.classList.remove(It,h,c),this._isSliding=!1,setTimeout(u,0)};this._queueCallback(e,n,!0)}else n.classList.remove(It),o.classList.add(It),this._isSliding=!1,u();a&&this.cycle()}_directionToOrder(e){return[xt,Ot].includes(e)?Ue()?e===Ot?Ct:kt:e===Ot?kt:Ct:e}_orderToDirection(e){return[kt,Ct].includes(e)?Ue()?e===Ct?Ot:xt:e===Ct?xt:Ot:e}static carouselInterface(e,t){const i=jt.getOrCreateInstance(e,t);let{_config:n}=i;"object"==typeof t&&(n={...n,...t});const s="string"==typeof t?t:n.slide;if("number"==typeof t)i.to(t);else if("string"==typeof s){if(void 0===i[s])throw new TypeError(`No method named "${s}"`);i[s]()}else n.interval&&n.ride&&(i.pause(),i.cycle())}static jQueryInterface(e){return this.each((function(){jt.carouselInterface(this,e)}))}static dataApiClickHandler(e){const t=Ne(this);if(!t||!t.classList.contains("carousel"))return;const i={...wt.getDataAttributes(t),...wt.getDataAttributes(this)},n=this.getAttribute("data-bs-slide-to");n&&(i.interval=!1),jt.carouselInterface(t,i),n&&jt.getInstance(t).to(n),e.preventDefault()}}dt.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",jt.dataApiClickHandler),dt.on(window,"load.bs.carousel.data-api",(()=>{const e=Et.find('[data-bs-ride="carousel"]');for(let t=0,i=e.length;t<i;t++)jt.carouselInterface(e[t],jt.getInstance(e[t]))})),Ve(jt);const Pt="collapse",Mt={toggle:!0,parent:null},Ht={toggle:"boolean",parent:"(null|element)"},Bt="show",qt="collapse",Rt="collapsing",Wt="collapsed",$t=":scope .collapse .collapse",zt='[data-bs-toggle="collapse"]';class Ft extends ft{constructor(e,t){super(e),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=[];const i=Et.find(zt);for(let e=0,t=i.length;e<t;e++){const t=i[e],n=Ie(t),s=Et.find(n).filter((e=>e===this._element));null!==n&&s.length&&(this._selector=n,this._triggerArray.push(t))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Mt}static get NAME(){return Pt}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e,t=[];if(this._config.parent){const e=Et.find($t,this._config.parent);t=Et.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((t=>!e.includes(t)))}const i=Et.findOne(this._selector);if(t.length){const n=t.find((e=>i!==e));if(e=n?Ft.getInstance(n):null,e&&e._isTransitioning)return}if(dt.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t.forEach((t=>{i!==t&&Ft.getOrCreateInstance(t,{toggle:!1}).hide(),e||pt.set(t,"bs.collapse",null)}));const n=this._getDimension();this._element.classList.remove(qt),this._element.classList.add(Rt),this._element.style[n]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const s=`scroll${n[0].toUpperCase()+n.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Rt),this._element.classList.add(qt,Bt),this._element.style[n]="",dt.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[n]=`${this._element[s]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(dt.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,$e(this._element),this._element.classList.add(Rt),this._element.classList.remove(qt,Bt);const t=this._triggerArray.length;for(let e=0;e<t;e++){const t=this._triggerArray[e],i=Ne(t);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Rt),this._element.classList.add(qt),dt.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Bt)}_getConfig(e){return(e={...Mt,...wt.getDataAttributes(this._element),...e}).toggle=Boolean(e.toggle),e.parent=Me(e.parent),He(Pt,e,Ht),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=Et.find($t,this._config.parent);Et.find(zt,this._config.parent).filter((t=>!e.includes(t))).forEach((e=>{const t=Ne(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}))}_addAriaAndCollapsedClass(e,t){e.length&&e.forEach((e=>{t?e.classList.remove(Wt):e.classList.add(Wt),e.setAttribute("aria-expanded",t)}))}static jQueryInterface(e){return this.each((function(){const t={};"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1);const i=Ft.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e]()}}))}}dt.on(document,"click.bs.collapse.data-api",zt,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Ie(this);Et.find(t).forEach((e=>{Ft.getOrCreateInstance(e,{toggle:!1}).toggle()}))})),Ve(Ft);const Ut="dropdown",Vt="Escape",Yt="Space",Kt="ArrowUp",Xt="ArrowDown",Qt=new RegExp("ArrowUp|ArrowDown|Escape"),Gt="click.bs.dropdown.data-api",Jt="keydown.bs.dropdown.data-api",Zt="show",ei='[data-bs-toggle="dropdown"]',ti=".dropdown-menu",ii=Ue()?"top-end":"top-start",ni=Ue()?"top-start":"top-end",si=Ue()?"bottom-end":"bottom-start",oi=Ue()?"bottom-start":"bottom-end",ri=Ue()?"left-start":"right-start",ai=Ue()?"right-start":"left-start",li={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},ci={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class hi extends ft{constructor(e,t){super(e),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return li}static get DefaultType(){return ci}static get NAME(){return Ut}toggle(){return this._isShown()?this.hide():this.show()}show(){if(qe(this._element)||this._isShown(this._menu))return;const e={relatedTarget:this._element};if(dt.trigger(this._element,"show.bs.dropdown",e).defaultPrevented)return;const t=hi.getParentFromElement(this._element);this._inNavbar?wt.setDataAttribute(this._menu,"popper","none"):this._createPopper(t),"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((e=>dt.on(e,"mouseover",We))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Zt),this._element.classList.add(Zt),dt.trigger(this._element,"shown.bs.dropdown",e)}hide(){if(qe(this._element)||!this._isShown(this._menu))return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){dt.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>dt.off(e,"mouseover",We))),this._popper&&this._popper.destroy(),this._menu.classList.remove(Zt),this._element.classList.remove(Zt),this._element.setAttribute("aria-expanded","false"),wt.removeDataAttribute(this._menu,"popper"),dt.trigger(this._element,"hidden.bs.dropdown",e))}_getConfig(e){if(e={...this.constructor.Default,...wt.getDataAttributes(this._element),...e},He(Ut,e,this.constructor.DefaultType),"object"==typeof e.reference&&!Pe(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Ut.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(t){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let i=this._element;"parent"===this._config.reference?i=t:Pe(this._config.reference)?i=Me(this._config.reference):"object"==typeof this._config.reference&&(i=this._config.reference);const n=this._getPopperConfig(),s=n.modifiers.find((e=>"applyStyles"===e.name&&!1===e.enabled));this._popper=Oe(i,this._menu,n),s&&wt.setDataAttribute(this._menu,"popper","static")}_isShown(e=this._element){return e.classList.contains(Zt)}_getMenuElement(){return Et.next(this._element,ti)[0]}_getPlacement(){const e=this._element.parentNode;if(e.classList.contains("dropend"))return ri;if(e.classList.contains("dropstart"))return ai;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?ni:ii:t?oi:si}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const i=Et.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Be);i.length&&Xe(i,t,e===Xt,!i.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(e&&(2===e.button||"keyup"===e.type&&"Tab"!==e.key))return;const t=Et.find(ei);for(let i=0,n=t.length;i<n;i++){const n=hi.getInstance(t[i]);if(!n||!1===n._config.autoClose)continue;if(!n._isShown())continue;const s={relatedTarget:n._element};if(e){const t=e.composedPath(),i=t.includes(n._menu);if(t.includes(n._element)||"inside"===n._config.autoClose&&!i||"outside"===n._config.autoClose&&i)continue;if(n._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(s.clickEvent=e)}n._completeHide(s)}}static getParentFromElement(e){return Ne(e)||e.parentNode}static dataApiKeydownHandler(e){if(/input|textarea/i.test(e.target.tagName)?e.key===Yt||e.key!==Vt&&(e.key!==Xt&&e.key!==Kt||e.target.closest(ti)):!Qt.test(e.key))return;const t=this.classList.contains(Zt);if(!t&&e.key===Vt)return;if(e.preventDefault(),e.stopPropagation(),qe(this))return;const i=this.matches(ei)?this:Et.prev(this,ei)[0],n=hi.getOrCreateInstance(i);if(e.key!==Vt)return e.key===Kt||e.key===Xt?(t||n.show(),void n._selectMenuItem(e)):void(t&&e.key!==Yt||hi.clearMenus());n.hide()}}dt.on(document,Jt,ei,hi.dataApiKeydownHandler),dt.on(document,Jt,ti,hi.dataApiKeydownHandler),dt.on(document,Gt,hi.clearMenus),dt.on(document,"keyup.bs.dropdown.data-api",hi.clearMenus),dt.on(document,Gt,ei,(function(e){e.preventDefault(),hi.getOrCreateInstance(this).toggle()})),Ve(hi);const di=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",ui=".sticky-top";class pi{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(t=>t+e)),this._setElementAttributes(di,"paddingRight",(t=>t+e)),this._setElementAttributes(ui,"marginRight",(t=>t-e))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,i){const n=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+n)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e)[t];e.style[t]=`${i(Number.parseFloat(s))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(di,"paddingRight"),this._resetElementAttributes(ui,"marginRight")}_saveInitialAttribute(e,t){const i=e.style[t];i&&wt.setDataAttribute(e,t,i)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const i=wt.getDataAttribute(e,t);void 0===i?e.style.removeProperty(t):(wt.removeDataAttribute(e,t),e.style[t]=i)}))}_applyManipulationCallback(e,t){Pe(e)?t(e):Et.find(e,this._element).forEach(t)}isOverflowing(){return this.getWidth()>0}}const fi={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},mi={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},gi="show",_i="mousedown.bs.backdrop";class bi{constructor(e){this._config=this._getConfig(e),this._isAppended=!1,this._element=null}show(e){this._config.isVisible?(this._append(),this._config.isAnimated&&$e(this._getElement()),this._getElement().classList.add(gi),this._emulateAnimation((()=>{Ye(e)}))):Ye(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove(gi),this._emulateAnimation((()=>{this.dispose(),Ye(e)}))):Ye(e)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_getConfig(e){return(e={...fi,..."object"==typeof e?e:{}}).rootElement=Me(e.rootElement),He("backdrop",e,mi),e}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),dt.on(this._getElement(),_i,(()=>{Ye(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(dt.off(this._element,_i),this._element.remove(),this._isAppended=!1)}_emulateAnimation(e){Ke(e,this._getElement(),this._config.isAnimated)}}const vi={trapElement:null,autofocus:!0},yi={trapElement:"element",autofocus:"boolean"},wi=".bs.focustrap",Ei="backward";class Ai{constructor(e){this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:e,autofocus:t}=this._config;this._isActive||(t&&e.focus(),dt.off(document,wi),dt.on(document,"focusin.bs.focustrap",(e=>this._handleFocusin(e))),dt.on(document,"keydown.tab.bs.focustrap",(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,dt.off(document,wi))}_handleFocusin(e){const{target:t}=e,{trapElement:i}=this._config;if(t===document||t===i||i.contains(t))return;const n=Et.focusableChildren(i);0===n.length?i.focus():this._lastTabNavDirection===Ei?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Ei:"forward")}_getConfig(e){return e={...vi,..."object"==typeof e?e:{}},He("focustrap",e,yi),e}}const Ti="modal",Li="Escape",ki={backdrop:!0,keyboard:!0,focus:!0},Ci={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Oi="hidden.bs.modal",xi="show.bs.modal",Si="resize.bs.modal",Di="click.dismiss.bs.modal",Ii="keydown.dismiss.bs.modal",Ni="mousedown.dismiss.bs.modal",ji="modal-open",Pi="show",Mi="modal-static";class Hi extends ft{constructor(e,t){super(e),this._config=this._getConfig(t),this._dialog=Et.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new pi}static get Default(){return ki}static get NAME(){return Ti}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||dt.trigger(this._element,xi,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(ji),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),dt.on(this._dialog,Ni,(()=>{dt.one(this._element,"mouseup.dismiss.bs.modal",(e=>{e.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;if(dt.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Pi),dt.off(this._element,Di),dt.off(this._dialog,Ni),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((e=>dt.off(e,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new bi({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ai({trapElement:this._element})}_getConfig(e){return e={...ki,...wt.getDataAttributes(this._element),..."object"==typeof e?e:{}},He(Ti,e,Ci),e}_showElement(e){const t=this._isAnimated(),i=Et.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,i&&(i.scrollTop=0),t&&$e(this._element),this._element.classList.add(Pi),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,dt.trigger(this._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,t)}_setEscapeEvent(){this._isShown?dt.on(this._element,Ii,(e=>{this._config.keyboard&&e.key===Li?(e.preventDefault(),this.hide()):this._config.keyboard||e.key!==Li||this._triggerBackdropTransition()})):dt.off(this._element,Ii)}_setResizeEvent(){this._isShown?dt.on(window,Si,(()=>this._adjustDialog())):dt.off(window,Si)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(ji),this._resetAdjustments(),this._scrollBar.reset(),dt.trigger(this._element,Oi)}))}_showBackdrop(e){dt.on(this._element,Di,(e=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(e)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(dt.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:e,scrollHeight:t,style:i}=this._element,n=t>document.documentElement.clientHeight;!n&&"hidden"===i.overflowY||e.contains(Mi)||(n||(i.overflowY="hidden"),e.add(Mi),this._queueCallback((()=>{e.remove(Mi),n||this._queueCallback((()=>{i.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),i=t>0;(!i&&e&&!Ue()||i&&!e&&Ue())&&(this._element.style.paddingLeft=`${t}px`),(i&&!e&&!Ue()||!i&&e&&Ue())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const i=Hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e](t)}}))}}dt.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){const t=Ne(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),dt.one(t,xi,(e=>{e.defaultPrevented||dt.one(t,Oi,(()=>{Be(this)&&this.focus()}))}));const i=Et.findOne(".modal.show");i&&Hi.getInstance(i).hide(),Hi.getOrCreateInstance(t).toggle(this)})),mt(Hi),Ve(Hi);const Bi="offcanvas",qi={backdrop:!0,keyboard:!0,scroll:!1},Ri={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Wi="show",$i=".offcanvas.show",zi="hidden.bs.offcanvas";class Fi extends ft{constructor(e,t){super(e),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Bi}static get Default(){return qi}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||dt.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new pi).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Wi),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),dt.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(dt.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(Wi),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new pi).reset(),dt.trigger(this._element,zi)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(e){return e={...qi,...wt.getDataAttributes(this._element),..."object"==typeof e?e:{}},He(Bi,e,Ri),e}_initializeBackDrop(){return new bi({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Ai({trapElement:this._element})}_addEventListeners(){dt.on(this._element,"keydown.dismiss.bs.offcanvas",(e=>{this._config.keyboard&&"Escape"===e.key&&this.hide()}))}static jQueryInterface(e){return this.each((function(){const t=Fi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}dt.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){const t=Ne(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),qe(this))return;dt.one(t,zi,(()=>{Be(this)&&this.focus()}));const i=Et.findOne($i);i&&i!==t&&Fi.getInstance(i).hide(),Fi.getOrCreateInstance(t).toggle(this)})),dt.on(window,"load.bs.offcanvas.data-api",(()=>Et.find($i).forEach((e=>Fi.getOrCreateInstance(e).show())))),mt(Fi),Ve(Fi);const Ui=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Vi=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Yi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Ki=(e,t)=>{const i=e.nodeName.toLowerCase();if(t.includes(i))return!Ui.has(i)||Boolean(Vi.test(e.nodeValue)||Yi.test(e.nodeValue));const n=t.filter((e=>e instanceof RegExp));for(let e=0,t=n.length;e<t;e++)if(n[e].test(i))return!0;return!1};function Xi(e,t,i){if(!e.length)return e;if(i&&"function"==typeof i)return i(e);const n=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(let e=0,i=s.length;e<i;e++){const i=s[e],n=i.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){i.remove();continue}const o=[].concat(...i.attributes),r=[].concat(t["*"]||[],t[n]||[]);o.forEach((e=>{Ki(e,r)||i.removeAttribute(e.nodeName)}))}return n.body.innerHTML}const Qi="tooltip",Gi=new Set(["sanitize","allowList","sanitizeFn"]),Ji={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},Zi={AUTO:"auto",TOP:"top",RIGHT:Ue()?"left":"right",BOTTOM:"bottom",LEFT:Ue()?"right":"left"},en={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},tn={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},nn="fade",sn="show",on="show",rn="out",an=".tooltip-inner",ln=".modal",cn="hide.bs.modal",hn="hover",dn="focus";class un extends ft{constructor(t,i){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(i),this.tip=null,this._setListeners()}static get Default(){return en}static get NAME(){return Qi}static get Event(){return tn}static get DefaultType(){return Ji}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled)if(e){const t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains(sn))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),dt.off(this._element.closest(ln),cn,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const e=dt.trigger(this._element,this.constructor.Event.SHOW),t=Re(this._element),i=null===t?this._element.ownerDocument.documentElement.contains(this._element):t.contains(this._element);if(e.defaultPrevented||!i)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(an).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const n=this.getTipElement(),s=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME);n.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this._config.animation&&n.classList.add(nn);const o="function"==typeof this._config.placement?this._config.placement.call(this,n,this._element):this._config.placement,r=this._getAttachment(o);this._addAttachmentClass(r);const{container:a}=this._config;pt.set(n,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(n),dt.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Oe(this._element,n,this._getPopperConfig(r)),n.classList.add(sn);const l=this._resolvePossibleFunction(this._config.customClass);l&&n.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>{dt.on(e,"mouseover",We)}));const c=this.tip.classList.contains(nn);this._queueCallback((()=>{const e=this._hoverState;this._hoverState=null,dt.trigger(this._element,this.constructor.Event.SHOWN),e===rn&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const e=this.getTipElement();if(dt.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;e.classList.remove(sn),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>dt.off(e,"mouseover",We))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const t=this.tip.classList.contains(nn);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==on&&e.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),dt.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,t),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const e=document.createElement("div");e.innerHTML=this._config.template;const t=e.children[0];return this.setContent(t),t.classList.remove(nn,sn),this.tip=t,this.tip}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),an)}_sanitizeAndSetContent(e,t,i){const n=Et.findOne(i,e);t||!n?this.setElementContent(n,t):n.remove()}setElementContent(e,t){if(null!==e)return Pe(t)?(t=Me(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.append(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Xi(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}getTitle(){const e=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(e)}updateAttachment(e){return"right"===e?"end":"left"===e?"start":e}_initializeOnDelegatedTarget(e,t){return t||this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:e=>this._handlePopperPlacementChange(e)}],onFirstUpdate:e=>{e.options.placement!==e.placement&&this._handlePopperPlacementChange(e)}};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_addAttachmentClass(e){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(e)}`)}_getAttachment(e){return Zi[e.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((e=>{if("click"===e)dt.on(this._element,this.constructor.Event.CLICK,this._config.selector,(e=>this.toggle(e)));else if("manual"!==e){const t=e===hn?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,i=e===hn?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;dt.on(this._element,t,this._config.selector,(e=>this._enter(e))),dt.on(this._element,i,this._config.selector,(e=>this._leave(e)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},dt.on(this._element.closest(ln),cn,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");(e||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}_enter(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?dn:hn]=!0),t.getTipElement().classList.contains(sn)||t._hoverState===on?t._hoverState=on:(clearTimeout(t._timeout),t._hoverState=on,t._config.delay&&t._config.delay.show?t._timeout=setTimeout((()=>{t._hoverState===on&&t.show()}),t._config.delay.show):t.show())}_leave(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?dn:hn]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=rn,t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((()=>{t._hoverState===rn&&t.hide()}),t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}_getConfig(e){const t=wt.getDataAttributes(this._element);return Object.keys(t).forEach((e=>{Gi.has(e)&&delete t[e]})),(e={...this.constructor.Default,...t,..."object"==typeof e&&e?e:{}}).container=!1===e.container?document.body:Me(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),He(Qi,e,this.constructor.DefaultType),e.sanitize&&(e.template=Xi(e.template,e.allowList,e.sanitizeFn)),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_cleanTipClass(){const e=this.getTipElement(),t=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),i=e.getAttribute("class").match(t);null!==i&&i.length>0&&i.map((e=>e.trim())).forEach((t=>e.classList.remove(t)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(e){const{state:t}=e;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=un.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ve(un);const pn={...un.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},fn={...un.DefaultType,content:"(string|element|function)"},mn={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class gn extends un{static get Default(){return pn}static get NAME(){return"popover"}static get Event(){return mn}static get DefaultType(){return fn}isWithContent(){return this.getTitle()||this._getContent()}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(e,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(e){return this.each((function(){const t=gn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ve(gn);const _n="scrollspy",bn={offset:10,method:"auto",target:""},vn={offset:"number",method:"string",target:"(string|element)"},yn="active",wn=".nav-link, .list-group-item, .dropdown-item",En="position";class An extends ft{constructor(e,t){super(e),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,dt.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return bn}static get NAME(){return _n}refresh(){const e=this._scrollElement===this._scrollElement.window?"offset":En,t="auto"===this._config.method?e:this._config.method,i=t===En?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Et.find(wn,this._config.target).map((e=>{const n=Ie(e),s=n?Et.findOne(n):null;if(s){const e=s.getBoundingClientRect();if(e.width||e.height)return[wt[t](s).top+i,n]}return null})).filter((e=>e)).sort(((e,t)=>e[0]-t[0])).forEach((e=>{this._offsets.push(e[0]),this._targets.push(e[1])}))}dispose(){dt.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(e){return(e={...bn,...wt.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}}).target=Me(e.target)||document.documentElement,He(_n,e,vn),e}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),i=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=i){const e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let t=this._offsets.length;t--;)this._activeTarget!==this._targets[t]&&e>=this._offsets[t]&&(void 0===this._offsets[t+1]||e<this._offsets[t+1])&&this._activate(this._targets[t])}}_activate(e){this._activeTarget=e,this._clear();const t=wn.split(",").map((t=>`${t}[data-bs-target="${e}"],${t}[href="${e}"]`)),i=Et.findOne(t.join(","),this._config.target);i.classList.add(yn),i.classList.contains("dropdown-item")?Et.findOne(".dropdown-toggle",i.closest(".dropdown")).classList.add(yn):Et.parents(i,".nav, .list-group").forEach((e=>{Et.prev(e,".nav-link, .list-group-item").forEach((e=>e.classList.add(yn))),Et.prev(e,".nav-item").forEach((e=>{Et.children(e,".nav-link").forEach((e=>e.classList.add(yn)))}))})),dt.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:e})}_clear(){Et.find(wn,this._config.target).filter((e=>e.classList.contains(yn))).forEach((e=>e.classList.remove(yn)))}static jQueryInterface(e){return this.each((function(){const t=An.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}dt.on(window,"load.bs.scrollspy.data-api",(()=>{Et.find('[data-bs-spy="scroll"]').forEach((e=>new An(e)))})),Ve(An);const Tn="active",Ln="fade",kn="show",Cn=".active",On=":scope > li > .active";class xn extends ft{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Tn))return;let e;const t=Ne(this._element),i=this._element.closest(".nav, .list-group");if(i){const t="UL"===i.nodeName||"OL"===i.nodeName?On:Cn;e=Et.find(t,i),e=e[e.length-1]}const n=e?dt.trigger(e,"hide.bs.tab",{relatedTarget:this._element}):null;if(dt.trigger(this._element,"show.bs.tab",{relatedTarget:e}).defaultPrevented||null!==n&&n.defaultPrevented)return;this._activate(this._element,i);const s=()=>{dt.trigger(e,"hidden.bs.tab",{relatedTarget:this._element}),dt.trigger(this._element,"shown.bs.tab",{relatedTarget:e})};t?this._activate(t,t.parentNode,s):s()}_activate(e,t,i){const n=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?Et.children(t,Cn):Et.find(On,t))[0],s=i&&n&&n.classList.contains(Ln),o=()=>this._transitionComplete(e,n,i);n&&s?(n.classList.remove(kn),this._queueCallback(o,e,!0)):o()}_transitionComplete(e,t,i){if(t){t.classList.remove(Tn);const e=Et.findOne(":scope > .dropdown-menu .active",t.parentNode);e&&e.classList.remove(Tn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add(Tn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),$e(e),e.classList.contains(Ln)&&e.classList.add(kn);let n=e.parentNode;if(n&&"LI"===n.nodeName&&(n=n.parentNode),n&&n.classList.contains("dropdown-menu")){const t=e.closest(".dropdown");t&&Et.find(".dropdown-toggle",t).forEach((e=>e.classList.add(Tn))),e.setAttribute("aria-expanded",!0)}i&&i()}static jQueryInterface(e){return this.each((function(){const t=xn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}dt.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),qe(this)||xn.getOrCreateInstance(this).show()})),Ve(xn);const Sn="toast",Dn="hide",In="show",Nn="showing",jn={animation:"boolean",autohide:"boolean",delay:"number"},Pn={animation:!0,autohide:!0,delay:5e3};class Mn extends ft{constructor(e,t){super(e),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return jn}static get Default(){return Pn}static get NAME(){return Sn}show(){dt.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Dn),$e(this._element),this._element.classList.add(In),this._element.classList.add(Nn),this._queueCallback((()=>{this._element.classList.remove(Nn),dt.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(In)&&(dt.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Nn),this._queueCallback((()=>{this._element.classList.add(Dn),this._element.classList.remove(Nn),this._element.classList.remove(In),dt.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(In)&&this._element.classList.remove(In),super.dispose()}_getConfig(e){return e={...Pn,...wt.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}},He(Sn,e,this.constructor.DefaultType),e}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const i=e.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){dt.on(this._element,"mouseover.bs.toast",(e=>this._onInteraction(e,!0))),dt.on(this._element,"mouseout.bs.toast",(e=>this._onInteraction(e,!1))),dt.on(this._element,"focusin.bs.toast",(e=>this._onInteraction(e,!0))),dt.on(this._element,"focusout.bs.toast",(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Mn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}function Hn(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};e.src=t,e.alt=i,n(e)}mt(Mn),Ve(Mn),i(607);var Bn=i(306),qn=i(904);i(239),Hn(document.querySelector(".avatar"),Bn,void 0,(function(e){e.draggable=!1})),Hn(document.querySelector(".avatar-about"),qn,void 0,(function(e){e.draggable=!1})),i(958);var Rn=function e(t,i,n,s,o,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.desktopUrl=i,this.mobileUrl=n,this.title=s,this.bodyText=o,this.siteUrl=r,this.sourceUrl=a},Wn=i(611),$n=i(265),zn=i(387),Fn=i(736),Un=i(843),Vn=i(179),Yn=i(973),Kn=i(616),Xn=(i(457),i(927),i(766)),Qn=i(752),Gn=i(78),Jn=i(35),Zn=[],es=new Rn(0,Wn,$n,"Api employee directory",["Communicating with APIs allows you to work with microservices and with vast databases to build useful tools and relevant information quickly and easily. You can build utilities, games, infographics, and more. You can also integrate, display, and analyze social media and large data sets without having to create and curate them yourself.","For this project, I’ve build an app for a fictional company called Awesome Startup, a distributed company with remote employees working all over the world. They need a smart way for employees to share contact information with each other."],"https://nate-mal.github.io/employee_directory/","https://github.com/nate-mal/employee_directory"),ts=new Rn(1,zn,Fn,"Oop Game Show App",['In this project I’ve created a browser-based, word guessing game: "Phrase Hunter." I’ve used JavaScript and OOP (Object-Oriented Programming) to select a random, hidden phrase, which a player tries to guess, by clicking letters on an onscreen keyboard.',"Each time the player guesses a letter, the program compares the letter the player has chosen with the random phrase. If the letter is in the phrase, the gameboard displays the chosen letters on the screen."],"https://nate-mal.github.io/game_show_app/","https://github.com/nate-mal/game_show_app"),is=new Rn(2,Un,Vn,"Online Form",['In this project I’ve  created a responsive, mobile-friendly registration form using a wide variety of HTML form input types and attributes, a "mobile-first" approach.',"This is an old project although, see the present contact section 😅"],"https://nate-mal.github.io/online_registration_form/","https://github.com/nate-mal/online_registration_form"),ns=new Rn(3,Yn,Kn," Interactive Photo Gallery",["In this project I’ve  created an interactive photo gallery using JavaScript and CSS Grid Layout. At the top of the page is a search area where photos will hide and show depending on user input. ",'When the user clicks on a thumbnail, the photo will display in a lightbox where are "back" and "previous" arrows to cycle through photos.'],"https://nate-mal.github.io/photo-gallery/","https://github.com/nate-mal/photo-gallery"),ss=new Rn(4,Xn,Qn,"About this project",["In this project I've build a responsive, mobile-first layout using HTML and CSS","This is an old project 😅"],"https://nate-mal.github.io/first_responsive_layout/","https://github.com/nate-mal/first_responsive_layout/"),os=new Rn(5,Gn,Jn,"About this project",["Many websites do more than just give you information. Sites like GitHub, Zillow, Mint and Facebook let users do things. They act like programs you run on your computer. These web applications, often include pages for looking at your profile, what you've done in the week or what you need to get done.","In this project I’ve  took  a mockup and a few icons and built a beautiful, web dashboard complete with JavaScript-driven charts and graphs. "],"https://nate-mal.github.io/web_app_dashboard/","https://github.com/nate-mal/web_app_dashboard/");Zn.push(es),Zn.push(ts),Zn.push(is),Zn.push(ns),Zn.push(ss),Zn.push(os),function(e,t){var i,n=document.querySelector("#portfolio"),s=t;(function(){var e=document.createElement("div");e.classList.add("container");var t=document.createElement("div");return t.classList.add("row"),e.appendChild(t),n.appendChild(e),s.forEach((function(e){!function(e){var t=n.querySelector(".row"),i=document.createElement("img");i.classList.add("portfolio-image");var s=document.createElement("a");s.href="#portfolio",s.classList.add("portfolio-item","col-12","col-md-6","col-lg-4"),s.appendChild(i),t.appendChild(s),Hn(i,e.desktopUrl,e.desktopUrl,(function(t){return t.id=e.id}))}(e)})),Promise.resolve()})().then((i=function e(t){var i=s.find((function(e){return e.id==t})),o=n.querySelector(".row"),r=document.createElement("a");r.href="#".concat(i.id),r.classList.add("command-btn","menu"),r.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-arrow-left-circle" viewBox="0 0 16 16">\n        <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z"/>\n      </svg>';var a=document.createElement("a");a.href="#portfolio",a.classList.add("command-btn","slide","slide-left"),a.innerHTML=' <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">\n      <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>\n    </svg>';var l=document.createElement("a");l.href="#portfolio",l.classList.add("command-btn","slide","slide-right"),l.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">\n    <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>\n  </svg>';var c=document.createElement("div");c.classList.add("command-panel","col-12"),c.appendChild(r),c.appendChild(a),c.appendChild(l);var h,d,u,p,f,m=document.createElement("img"),g=document.createElement("img"),_=document.createElement("div"),b=document.createElement("div"),v=document.createElement("div"),y=document.createElement("div");y.id="showTime",y.classList.add("show-container","row"),o.insertBefore(y,document.getElementById(t).parentNode),y.appendChild(c),y.appendChild(b),y.appendChild(_),y.appendChild(v),_.classList.add("portfolio-show-item","description","col-12","col-lg-6"),_.innerHTML=(h=i.title,d=i.bodyText[0],u=i.bodyText[1],p=i.siteUrl,f=i.sourceUrl,'\n <div class="d-flex flex-column justify-content-lg-center my-5 hero-text-group">\n              <h1 class="display-5">'.concat(h,'</h1>\n              <p class="lead">\n                ').concat(d,'\n              </p>\n              <p class="lead">\n                ').concat(u,'\n              </p>\n\n              <div\n                class="\n                  d-flex\n                  flex-column\n                  align-items-center align-items-md-start\n                "\n              >\n                <div class="mb-5">\n                  <a href="').concat(p,'" target="_blank" class="btn btn-danger btn-lg m-1">\n                    Live Website\n                  </a>\n                  <a href="').concat(f,'" target="_blank"\n                    \n                    class="btn btn-outline-danger btn-lg m-1"\n                  >\n                  <svg\n                  xmlns="http://www.w3.org/2000/svg"\n                  width="16"\n                  height="16"\n                  fill="currentColor"\n                  class="bi bi-github"\n                  viewBox="0 0 16 16"\n                >\n                  <path\n                    d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"\n                  />\n                </svg>\n                    View Source\n              </a>\n                </div>\n              </div>\n              </div>\n              ')),b.classList.add("portfolio-show-item","mobile","col-12","col-lg-4"),b.appendChild(g),v.classList.add("portfolio-show-item","desktop","col-12","col-lg-12"),v.appendChild(m),Hn(m,i.desktopUrl),Hn(g,i.mobileUrl),r.addEventListener("click",(function(){o.removeChild(y),n.querySelectorAll(".portfolio-item").forEach((function(e){e.classList.remove("selected")})),n.classList.remove("show")})),i!==s[0]?a.addEventListener("click",(function(){o.removeChild(y),e(i.id-1)})):a.style.display="none",i!==s[s.length-1]?l.addEventListener("click",(function(){o.removeChild(y),e(i.id+1)})):l.style.display="none"},void n.addEventListener("click",(function(e){if(e.target.classList.contains("portfolio-image")){s=n.querySelectorAll(".portfolio-item"),n.classList.contains("show")&&n.classList.remove("show"),s.forEach((function(e){e.classList.remove("selected")})),n.classList.add("show");var t=e.target.parentNode;return t.classList.add("selected"),i(e.target.id),Promise.resolve(t.id)}var s}))))}(0,Zn)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,