/*! For license information please see main.b6909cdb93a2a7420dae.js.LICENSE.txt */
(()=>{var e={958:()=>{var e=document.querySelector("body"),t=document.getElementById("switch-theme");function i(e){localStorage.setItem("settingsData",JSON.stringify(e))}t.addEventListener("change",(function(n){t.checked?(e.classList.remove("theme-light"),e.classList.add("theme-dark")):(e.classList.remove("theme-dark"),e.classList.add("theme-light"));var s={};s.darkMode=t.checked,i(s)})),localStorage.getItem("settingsData")||i({darkMode:!1}),window.onload=function(){var i;i=JSON.parse(localStorage.getItem("settingsData")),t.checked=i.darkMode,t.checked?(e.classList.remove("theme-light"),e.classList.add("theme-dark")):(e.classList.remove("theme-dark"),e.classList.add("theme-light"))};var n=document.getElementById("hamburger-button"),s=document.querySelector("#navbar-main");function o(){var e=0,t=window.scrollX,i=window.scrollY;return new Promise((function(n){!function s(o){o>=500||o-e>20?n():(window.scrollX==t&&window.scrollY==i||(e=o,t=window.scrollX,i=window.scrollY),requestAnimationFrame(s.bind(null,o+1)))}(0)}))}n.checked?s.classList.add("full-screen"):s.classList.remove("full-sreen"),n.addEventListener("change",(function(e){n.checked?s.classList.add("full-screen"):s.classList.remove("full-screen")})),document.querySelector(".custom-nav-group").addEventListener("click",(function(e){e.target.classList.contains("nav-link")&&n.checked&&o().then((function(){n.click()}))}));try{new MutationObserver((function(e){o().then((function(){e.forEach((function(e){"class"===e.attributeName&&document.querySelectorAll(".custom-nav-link").forEach((function(e){e.classList.contains("active")&&(document.querySelector(".navbar-brand").textContent=e.textContent)}))}))}))})).observe(document.querySelector(".custom-nav-group"),{attributes:!0,childList:!0,subtree:!0})}catch(e){console.error("navigation error: ",e.message)}},607:()=>{document.querySelectorAll(".hero-text-group").forEach((function(e){var t=e.querySelector(".find-me");e.addEventListener("click",(function(e){e.target.classList.contains("find-me")&&!t.classList.contains("expand")?t.classList.add("expand"):e.target.classList.contains("find-me")||t.classList.remove("expand")}))}));var e=document.querySelector(".logo");new MutationObserver((function(t){t.forEach((function(t){"class"===t.attributeName&&(document.querySelector(".hook-logo").classList.contains("active")?e.classList.remove("logo-fixed"):e.classList.contains("logo-fixed")||e.classList.add("logo-fixed"))}))})).observe(document.querySelector(".hook-logo"),{attributes:!0}),new MutationObserver((function(t){t.forEach((function(t){"class"===t.attributeName&&(document.querySelector(".hook-logo-footer").classList.contains("active")?e.classList.add("logo-hide"):(e.classList.remove("logo-hide"),e.classList.contains("logo-fixed")||e.classList.add("logo-fixed")))}))})).observe(document.querySelector(".hook-logo-footer"),{attributes:!0})}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var s=n.length-1;s>-1&&!e;)e=n[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{"use strict";var e={};i.r(e),i.d(e,{afterMain:()=>w,afterRead:()=>b,afterWrite:()=>k,applyStyles:()=>I,arrow:()=>G,auto:()=>r,basePlacements:()=>a,beforeMain:()=>v,beforeRead:()=>g,beforeWrite:()=>E,bottom:()=>n,clippingParents:()=>h,computeStyles:()=>te,createPopper:()=>Se,createPopperBase:()=>Le,createPopperLite:()=>Ie,detectOverflow:()=>ge,end:()=>c,eventListeners:()=>ne,flip:()=>_e,hide:()=>ye,left:()=>o,main:()=>y,modifierPhases:()=>T,offset:()=>we,placements:()=>m,popper:()=>u,popperGenerator:()=>Oe,popperOffsets:()=>Ee,preventOverflow:()=>Ae,read:()=>_,reference:()=>f,right:()=>s,start:()=>l,top:()=>t,variationPlacements:()=>p,viewport:()=>d,write:()=>A});var t="top",n="bottom",s="right",o="left",r="auto",a=[t,n,s,o],l="start",c="end",h="clippingParents",d="viewport",u="popper",f="reference",p=a.reduce((function(e,t){return e.concat([t+"-"+l,t+"-"+c])}),[]),m=[].concat(a,[r]).reduce((function(e,t){return e.concat([t,t+"-"+l,t+"-"+c])}),[]),g="beforeRead",_="read",b="afterRead",v="beforeMain",y="main",w="afterMain",E="beforeWrite",A="write",k="afterWrite",T=[g,_,b,v,y,w,E,A,k];function C(e){return e?(e.nodeName||"").toLowerCase():null}function x(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function O(e){return e instanceof x(e).Element||e instanceof Element}function L(e){return e instanceof x(e).HTMLElement||e instanceof HTMLElement}function S(e){return"undefined"!=typeof ShadowRoot&&(e instanceof x(e).ShadowRoot||e instanceof ShadowRoot)}const I={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},n=t.attributes[e]||{},s=t.elements[e];L(s)&&C(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(e){var t=n[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],s=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});L(n)&&C(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};function j(e){return e.split("-")[0]}var D=Math.max,$=Math.min,N=Math.round;function P(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function M(){return!/^((?!chrome|android).)*safari/i.test(P())}function q(e,t,i){void 0===t&&(t=!1),void 0===i&&(i=!1);var n=e.getBoundingClientRect(),s=1,o=1;t&&L(e)&&(s=e.offsetWidth>0&&N(n.width)/e.offsetWidth||1,o=e.offsetHeight>0&&N(n.height)/e.offsetHeight||1);var r=(O(e)?x(e):window).visualViewport,a=!M()&&i,l=(n.left+(a&&r?r.offsetLeft:0))/s,c=(n.top+(a&&r?r.offsetTop:0))/o,h=n.width/s,d=n.height/o;return{width:h,height:d,top:c,right:l+h,bottom:c+d,left:l,x:l,y:c}}function H(e){var t=q(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}function B(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&S(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function z(e){return x(e).getComputedStyle(e)}function F(e){return["table","td","th"].indexOf(C(e))>=0}function W(e){return((O(e)?e.ownerDocument:e.document)||window.document).documentElement}function R(e){return"html"===C(e)?e:e.assignedSlot||e.parentNode||(S(e)?e.host:null)||W(e)}function V(e){return L(e)&&"fixed"!==z(e).position?e.offsetParent:null}function U(e){for(var t=x(e),i=V(e);i&&F(i)&&"static"===z(i).position;)i=V(i);return i&&("html"===C(i)||"body"===C(i)&&"static"===z(i).position)?t:i||function(e){var t=/firefox/i.test(P());if(/Trident/i.test(P())&&L(e)&&"fixed"===z(e).position)return null;var i=R(e);for(S(i)&&(i=i.host);L(i)&&["html","body"].indexOf(C(i))<0;){var n=z(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(e)||t}function Y(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function X(e,t,i){return D(e,$(t,i))}function K(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Q(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}const G={name:"arrow",enabled:!0,phase:"main",fn:function(e){var i,r=e.state,l=e.name,c=e.options,h=r.elements.arrow,d=r.modifiersData.popperOffsets,u=j(r.placement),f=Y(u),p=[o,s].indexOf(u)>=0?"height":"width";if(h&&d){var m=function(e,t){return K("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Q(e,a))}(c.padding,r),g=H(h),_="y"===f?t:o,b="y"===f?n:s,v=r.rects.reference[p]+r.rects.reference[f]-d[f]-r.rects.popper[p],y=d[f]-r.rects.reference[f],w=U(h),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=v/2-y/2,k=m[_],T=E-g[p]-m[b],C=E/2-g[p]/2+A,x=X(k,C,T),O=f;r.modifiersData[l]=((i={})[O]=x,i.centerOffset=x-C,i)}},effect:function(e){var t=e.state,i=e.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&B(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function J(e){return e.split("-")[1]}var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ee(e){var i,r=e.popper,a=e.popperRect,l=e.placement,h=e.variation,d=e.offsets,u=e.position,f=e.gpuAcceleration,p=e.adaptive,m=e.roundOffsets,g=e.isFixed,_=d.x,b=void 0===_?0:_,v=d.y,y=void 0===v?0:v,w="function"==typeof m?m({x:b,y}):{x:b,y};b=w.x,y=w.y;var E=d.hasOwnProperty("x"),A=d.hasOwnProperty("y"),k=o,T=t,C=window;if(p){var O=U(r),L="clientHeight",S="clientWidth";O===x(r)&&"static"!==z(O=W(r)).position&&"absolute"===u&&(L="scrollHeight",S="scrollWidth"),(l===t||(l===o||l===s)&&h===c)&&(T=n,y-=(g&&O===C&&C.visualViewport?C.visualViewport.height:O[L])-a.height,y*=f?1:-1),l!==o&&(l!==t&&l!==n||h!==c)||(k=s,b-=(g&&O===C&&C.visualViewport?C.visualViewport.width:O[S])-a.width,b*=f?1:-1)}var I,j=Object.assign({position:u},p&&Z),D=!0===m?function(e,t){var i=e.x,n=e.y,s=t.devicePixelRatio||1;return{x:N(i*s)/s||0,y:N(n*s)/s||0}}({x:b,y},x(r)):{x:b,y};return b=D.x,y=D.y,f?Object.assign({},j,((I={})[T]=A?"0":"",I[k]=E?"0":"",I.transform=(C.devicePixelRatio||1)<=1?"translate("+b+"px, "+y+"px)":"translate3d("+b+"px, "+y+"px, 0)",I)):Object.assign({},j,((i={})[T]=A?y+"px":"",i[k]=E?b+"px":"",i.transform="",i))}const te={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:j(t.placement),variation:J(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ee(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ee(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ie={passive:!0};const ne={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,n=e.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=x(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",i.update,ie)})),a&&l.addEventListener("resize",i.update,ie),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",i.update,ie)})),a&&l.removeEventListener("resize",i.update,ie)}},data:{}};var se={left:"right",right:"left",bottom:"top",top:"bottom"};function oe(e){return e.replace(/left|right|bottom|top/g,(function(e){return se[e]}))}var re={start:"end",end:"start"};function ae(e){return e.replace(/start|end/g,(function(e){return re[e]}))}function le(e){var t=x(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ce(e){return q(W(e)).left+le(e).scrollLeft}function he(e){var t=z(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function de(e){return["html","body","#document"].indexOf(C(e))>=0?e.ownerDocument.body:L(e)&&he(e)?e:de(R(e))}function ue(e,t){var i;void 0===t&&(t=[]);var n=de(e),s=n===(null==(i=e.ownerDocument)?void 0:i.body),o=x(n),r=s?[o].concat(o.visualViewport||[],he(n)?n:[]):n,a=t.concat(r);return s?a:a.concat(ue(R(r)))}function fe(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function pe(e,t,i){return t===d?fe(function(e,t){var i=x(e),n=W(e),s=i.visualViewport,o=n.clientWidth,r=n.clientHeight,a=0,l=0;if(s){o=s.width,r=s.height;var c=M();(c||!c&&"fixed"===t)&&(a=s.offsetLeft,l=s.offsetTop)}return{width:o,height:r,x:a+ce(e),y:l}}(e,i)):O(t)?function(e,t){var i=q(e,!1,"fixed"===t);return i.top=i.top+e.clientTop,i.left=i.left+e.clientLeft,i.bottom=i.top+e.clientHeight,i.right=i.left+e.clientWidth,i.width=e.clientWidth,i.height=e.clientHeight,i.x=i.left,i.y=i.top,i}(t,i):fe(function(e){var t,i=W(e),n=le(e),s=null==(t=e.ownerDocument)?void 0:t.body,o=D(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=D(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ce(e),l=-n.scrollTop;return"rtl"===z(s||i).direction&&(a+=D(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(W(e)))}function me(e){var i,r=e.reference,a=e.element,h=e.placement,d=h?j(h):null,u=h?J(h):null,f=r.x+r.width/2-a.width/2,p=r.y+r.height/2-a.height/2;switch(d){case t:i={x:f,y:r.y-a.height};break;case n:i={x:f,y:r.y+r.height};break;case s:i={x:r.x+r.width,y:p};break;case o:i={x:r.x-a.width,y:p};break;default:i={x:r.x,y:r.y}}var m=d?Y(d):null;if(null!=m){var g="y"===m?"height":"width";switch(u){case l:i[m]=i[m]-(r[g]/2-a[g]/2);break;case c:i[m]=i[m]+(r[g]/2-a[g]/2)}}return i}function ge(e,i){void 0===i&&(i={});var o=i,r=o.placement,l=void 0===r?e.placement:r,c=o.strategy,p=void 0===c?e.strategy:c,m=o.boundary,g=void 0===m?h:m,_=o.rootBoundary,b=void 0===_?d:_,v=o.elementContext,y=void 0===v?u:v,w=o.altBoundary,E=void 0!==w&&w,A=o.padding,k=void 0===A?0:A,T=K("number"!=typeof k?k:Q(k,a)),x=y===u?f:u,S=e.rects.popper,I=e.elements[E?x:y],j=function(e,t,i,n){var s="clippingParents"===t?function(e){var t=ue(R(e)),i=["absolute","fixed"].indexOf(z(e).position)>=0&&L(e)?U(e):e;return O(i)?t.filter((function(e){return O(e)&&B(e,i)&&"body"!==C(e)})):[]}(e):[].concat(t),o=[].concat(s,[i]),r=o[0],a=o.reduce((function(t,i){var s=pe(e,i,n);return t.top=D(s.top,t.top),t.right=$(s.right,t.right),t.bottom=$(s.bottom,t.bottom),t.left=D(s.left,t.left),t}),pe(e,r,n));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(O(I)?I:I.contextElement||W(e.elements.popper),g,b,p),N=q(e.elements.reference),P=me({reference:N,element:S,strategy:"absolute",placement:l}),M=fe(Object.assign({},S,P)),H=y===u?M:N,F={top:j.top-H.top+T.top,bottom:H.bottom-j.bottom+T.bottom,left:j.left-H.left+T.left,right:H.right-j.right+T.right},V=e.modifiersData.offset;if(y===u&&V){var Y=V[l];Object.keys(F).forEach((function(e){var i=[s,n].indexOf(e)>=0?1:-1,o=[t,n].indexOf(e)>=0?"y":"x";F[e]+=Y[o]*i}))}return F}const _e={name:"flip",enabled:!0,phase:"main",fn:function(e){var i=e.state,c=e.options,h=e.name;if(!i.modifiersData[h]._skip){for(var d=c.mainAxis,u=void 0===d||d,f=c.altAxis,g=void 0===f||f,_=c.fallbackPlacements,b=c.padding,v=c.boundary,y=c.rootBoundary,w=c.altBoundary,E=c.flipVariations,A=void 0===E||E,k=c.allowedAutoPlacements,T=i.options.placement,C=j(T),x=_||(C!==T&&A?function(e){if(j(e)===r)return[];var t=oe(e);return[ae(e),t,ae(t)]}(T):[oe(T)]),O=[T].concat(x).reduce((function(e,t){return e.concat(j(t)===r?function(e,t){void 0===t&&(t={});var i=t,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,l=i.flipVariations,c=i.allowedAutoPlacements,h=void 0===c?m:c,d=J(n),u=d?l?p:p.filter((function(e){return J(e)===d})):a,f=u.filter((function(e){return h.indexOf(e)>=0}));0===f.length&&(f=u);var g=f.reduce((function(t,i){return t[i]=ge(e,{placement:i,boundary:s,rootBoundary:o,padding:r})[j(i)],t}),{});return Object.keys(g).sort((function(e,t){return g[e]-g[t]}))}(i,{placement:t,boundary:v,rootBoundary:y,padding:b,flipVariations:A,allowedAutoPlacements:k}):t)}),[]),L=i.rects.reference,S=i.rects.popper,I=new Map,D=!0,$=O[0],N=0;N<O.length;N++){var P=O[N],M=j(P),q=J(P)===l,H=[t,n].indexOf(M)>=0,B=H?"width":"height",z=ge(i,{placement:P,boundary:v,rootBoundary:y,altBoundary:w,padding:b}),F=H?q?s:o:q?n:t;L[B]>S[B]&&(F=oe(F));var W=oe(F),R=[];if(u&&R.push(z[M]<=0),g&&R.push(z[F]<=0,z[W]<=0),R.every((function(e){return e}))){$=P,D=!1;break}I.set(P,R)}if(D)for(var V=function(e){var t=O.find((function(t){var i=I.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return $=t,"break"},U=A?3:1;U>0&&"break"!==V(U);U--);i.placement!==$&&(i.modifiersData[h]._skip=!0,i.placement=$,i.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function be(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function ve(e){return[t,s,n,o].some((function(t){return e[t]>=0}))}const ye={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,n=t.rects.reference,s=t.rects.popper,o=t.modifiersData.preventOverflow,r=ge(t,{elementContext:"reference"}),a=ge(t,{altBoundary:!0}),l=be(r,n),c=be(a,s,o),h=ve(l),d=ve(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}},we={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var i=e.state,n=e.options,r=e.name,a=n.offset,l=void 0===a?[0,0]:a,c=m.reduce((function(e,n){return e[n]=function(e,i,n){var r=j(e),a=[o,t].indexOf(r)>=0?-1:1,l="function"==typeof n?n(Object.assign({},i,{placement:e})):n,c=l[0],h=l[1];return c=c||0,h=(h||0)*a,[o,s].indexOf(r)>=0?{x:h,y:c}:{x:c,y:h}}(n,i.rects,l),e}),{}),h=c[i.placement],d=h.x,u=h.y;null!=i.modifiersData.popperOffsets&&(i.modifiersData.popperOffsets.x+=d,i.modifiersData.popperOffsets.y+=u),i.modifiersData[r]=c}},Ee={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=me({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Ae={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var i=e.state,r=e.options,a=e.name,c=r.mainAxis,h=void 0===c||c,d=r.altAxis,u=void 0!==d&&d,f=r.boundary,p=r.rootBoundary,m=r.altBoundary,g=r.padding,_=r.tether,b=void 0===_||_,v=r.tetherOffset,y=void 0===v?0:v,w=ge(i,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),E=j(i.placement),A=J(i.placement),k=!A,T=Y(E),C="x"===T?"y":"x",x=i.modifiersData.popperOffsets,O=i.rects.reference,L=i.rects.popper,S="function"==typeof y?y(Object.assign({},i.rects,{placement:i.placement})):y,I="number"==typeof S?{mainAxis:S,altAxis:S}:Object.assign({mainAxis:0,altAxis:0},S),N=i.modifiersData.offset?i.modifiersData.offset[i.placement]:null,P={x:0,y:0};if(x){if(h){var M,q="y"===T?t:o,B="y"===T?n:s,z="y"===T?"height":"width",F=x[T],W=F+w[q],R=F-w[B],V=b?-L[z]/2:0,K=A===l?O[z]:L[z],Q=A===l?-L[z]:-O[z],G=i.elements.arrow,Z=b&&G?H(G):{width:0,height:0},ee=i.modifiersData["arrow#persistent"]?i.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=ee[q],ie=ee[B],ne=X(0,O[z],Z[z]),se=k?O[z]/2-V-ne-te-I.mainAxis:K-ne-te-I.mainAxis,oe=k?-O[z]/2+V+ne+ie+I.mainAxis:Q+ne+ie+I.mainAxis,re=i.elements.arrow&&U(i.elements.arrow),ae=re?"y"===T?re.clientTop||0:re.clientLeft||0:0,le=null!=(M=null==N?void 0:N[T])?M:0,ce=F+oe-le,he=X(b?$(W,F+se-le-ae):W,F,b?D(R,ce):R);x[T]=he,P[T]=he-F}if(u){var de,ue="x"===T?t:o,fe="x"===T?n:s,pe=x[C],me="y"===C?"height":"width",_e=pe+w[ue],be=pe-w[fe],ve=-1!==[t,o].indexOf(E),ye=null!=(de=null==N?void 0:N[C])?de:0,we=ve?_e:pe-O[me]-L[me]-ye+I.altAxis,Ee=ve?pe+O[me]+L[me]-ye-I.altAxis:be,Ae=b&&ve?function(e,t,i){var n=X(e,t,i);return n>i?i:n}(we,pe,Ee):X(b?we:_e,pe,b?Ee:be);x[C]=Ae,P[C]=Ae-pe}i.modifiersData[a]=P}},requiresIfExists:["offset"]};function ke(e,t,i){void 0===i&&(i=!1);var n,s,o=L(t),r=L(t)&&function(e){var t=e.getBoundingClientRect(),i=N(t.width)/e.offsetWidth||1,n=N(t.height)/e.offsetHeight||1;return 1!==i||1!==n}(t),a=W(t),l=q(e,r,i),c={scrollLeft:0,scrollTop:0},h={x:0,y:0};return(o||!o&&!i)&&(("body"!==C(t)||he(a))&&(c=(n=t)!==x(n)&&L(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:le(n)),L(t)?((h=q(t,!0)).x+=t.clientLeft,h.y+=t.clientTop):a&&(h.x=ce(a))),{x:l.left+c.scrollLeft-h.x,y:l.top+c.scrollTop-h.y,width:l.width,height:l.height}}function Te(e){var t=new Map,i=new Set,n=[];function s(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!i.has(e)){var n=t.get(e);n&&s(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||s(e)})),n}var Ce={placement:"bottom",modifiers:[],strategy:"absolute"};function xe(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Oe(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,n=void 0===i?[]:i,s=t.defaultOptions,o=void 0===s?Ce:s;return function(e,t,i){void 0===i&&(i=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ce,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,h={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;d(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:O(e)?ue(e):e.contextElement?ue(e.contextElement):[],popper:ue(t)};var r,c,u=function(e){var t=Te(e);return T.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}((r=[].concat(n,a.options.modifiers),c=r.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=u.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,n=void 0===i?{}:i,s=e.effect;if("function"==typeof s){var o=s({state:a,name:t,instance:h,options:n});l.push(o||function(){})}})),h.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,i=e.popper;if(xe(t,i)){a.rects={reference:ke(t,U(i),"fixed"===a.options.strategy),popper:H(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],o=s.fn,r=s.options,l=void 0===r?{}:r,d=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:d,instance:h})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(e){h.forceUpdate(),e(a)}))},function(){return r||(r=new Promise((function(e){Promise.resolve().then((function(){r=void 0,e(s())}))}))),r}),destroy:function(){d(),c=!0}};if(!xe(e,t))return h;function d(){l.forEach((function(e){return e()})),l=[]}return h.setOptions(i).then((function(e){!c&&i.onFirstUpdate&&i.onFirstUpdate(e)})),h}}var Le=Oe(),Se=Oe({defaultModifiers:[ne,Ee,te,I,we,_e,Ae,G,ye]}),Ie=Oe({defaultModifiers:[ne,Ee,te,I]});const je="transitionend",De=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let i=e.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),t=i&&"#"!==i?i.trim():null}return t},$e=e=>{const t=De(e);return t&&document.querySelector(t)?t:null},Ne=e=>{const t=De(e);return t?document.querySelector(t):null},Pe=e=>{e.dispatchEvent(new Event(je))},Me=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),qe=e=>Me(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,He=e=>{if(!Me(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),i=e.closest("details:not([open])");if(!i)return t;if(i!==e){const t=e.closest("summary");if(t&&t.parentNode!==i)return!1;if(null===t)return!1}return t},Be=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),ze=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?ze(e.parentNode):null},Fe=()=>{},We=e=>{e.offsetHeight},Re=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Ve=[],Ue=()=>"rtl"===document.documentElement.dir,Ye=e=>{var t;t=()=>{const t=Re();if(t){const i=e.NAME,n=t.fn[i];t.fn[i]=e.jQueryInterface,t.fn[i].Constructor=e,t.fn[i].noConflict=()=>(t.fn[i]=n,e.jQueryInterface)}},"loading"===document.readyState?(Ve.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of Ve)e()})),Ve.push(t)):t()},Xe=e=>{"function"==typeof e&&e()},Ke=(e,t,i=!0)=>{if(!i)return void Xe(e);const n=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:i}=window.getComputedStyle(e);const n=Number.parseFloat(t),s=Number.parseFloat(i);return n||s?(t=t.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(i))):0})(t)+5;let s=!1;const o=({target:i})=>{i===t&&(s=!0,t.removeEventListener(je,o),Xe(e))};t.addEventListener(je,o),setTimeout((()=>{s||Pe(t)}),n)},Qe=(e,t,i,n)=>{const s=e.length;let o=e.indexOf(t);return-1===o?!i&&n?e[s-1]:e[0]:(o+=i?1:-1,n&&(o=(o+s)%s),e[Math.max(0,Math.min(o,s-1))])},Ge=/[^.]*(?=\..*)\.|.*/,Je=/\..*/,Ze=/::\d+$/,et={};let tt=1;const it={mouseenter:"mouseover",mouseleave:"mouseout"},nt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function st(e,t){return t&&`${t}::${tt++}`||e.uidEvent||tt++}function ot(e){const t=st(e);return e.uidEvent=t,et[t]=et[t]||{},et[t]}function rt(e,t,i=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===i))}function at(e,t,i){const n="string"==typeof t,s=n?i:t||i;let o=dt(e);return nt.has(o)||(o=e),[n,s,o]}function lt(e,t,i,n,s){if("string"!=typeof t||!e)return;let[o,r,a]=at(t,i,n);if(t in it){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};r=e(r)}const l=ot(e),c=l[a]||(l[a]={}),h=rt(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=st(r,t.replace(Ge,"")),u=o?function(e,t,i){return function n(s){const o=e.querySelectorAll(t);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return ft(s,{delegateTarget:r}),n.oneOff&&ut.off(e,s.type,t,i),i.apply(r,[s])}}(e,i,r):function(e,t){return function i(n){return ft(n,{delegateTarget:e}),i.oneOff&&ut.off(e,n.type,t),t.apply(e,[n])}}(e,r);u.delegationSelector=o?i:null,u.callable=r,u.oneOff=s,u.uidEvent=d,c[d]=u,e.addEventListener(a,u,o)}function ct(e,t,i,n,s){const o=rt(t[i],n,s);o&&(e.removeEventListener(i,o,Boolean(s)),delete t[i][o.uidEvent])}function ht(e,t,i,n){const s=t[i]||{};for(const o of Object.keys(s))if(o.includes(n)){const n=s[o];ct(e,t,i,n.callable,n.delegationSelector)}}function dt(e){return e=e.replace(Je,""),it[e]||e}const ut={on(e,t,i,n){lt(e,t,i,n,!1)},one(e,t,i,n){lt(e,t,i,n,!0)},off(e,t,i,n){if("string"!=typeof t||!e)return;const[s,o,r]=at(t,i,n),a=r!==t,l=ot(e),c=l[r]||{},h=t.startsWith(".");if(void 0===o){if(h)for(const i of Object.keys(l))ht(e,l,i,t.slice(1));for(const i of Object.keys(c)){const n=i.replace(Ze,"");if(!a||t.includes(n)){const t=c[i];ct(e,l,r,t.callable,t.delegationSelector)}}}else{if(!Object.keys(c).length)return;ct(e,l,r,o,s?i:null)}},trigger(e,t,i){if("string"!=typeof t||!e)return null;const n=Re();let s=null,o=!0,r=!0,a=!1;t!==dt(t)&&n&&(s=n.Event(t,i),n(e).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());let l=new Event(t,{bubbles:o,cancelable:!0});return l=ft(l,i),a&&l.preventDefault(),r&&e.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function ft(e,t){for(const[i,n]of Object.entries(t||{}))try{e[i]=n}catch(t){Object.defineProperty(e,i,{configurable:!0,get:()=>n})}return e}const pt=new Map,mt={set(e,t,i){pt.has(e)||pt.set(e,new Map);const n=pt.get(e);n.has(t)||0===n.size?n.set(t,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(e,t)=>pt.has(e)&&pt.get(e).get(t)||null,remove(e,t){if(!pt.has(e))return;const i=pt.get(e);i.delete(t),0===i.size&&pt.delete(e)}};function gt(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function _t(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const bt={setDataAttribute(e,t,i){e.setAttribute(`data-bs-${_t(t)}`,i)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${_t(t)}`)},getDataAttributes(e){if(!e)return{};const t={},i=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),t[i]=gt(e.dataset[n])}return t},getDataAttribute:(e,t)=>gt(e.getAttribute(`data-bs-${_t(t)}`))};class vt{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const i=Me(t)?bt.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...Me(t)?bt.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const n of Object.keys(t)){const s=t[n],o=e[n],r=Me(o)?"element":null==(i=o)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${s}".`)}var i}}class yt extends vt{constructor(e,t){super(),(e=qe(e))&&(this._element=e,this._config=this._getConfig(t),mt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){mt.remove(this._element,this.constructor.DATA_KEY),ut.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,i=!0){Ke(e,t,i)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return mt.get(qe(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.2.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const wt=(e,t="hide")=>{const i=`click.dismiss${e.EVENT_KEY}`,n=e.NAME;ut.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),Be(this))return;const s=Ne(this)||this.closest(`.${n}`);e.getOrCreateInstance(s)[t]()}))},Et=".bs.alert",At=`close${Et}`,kt=`closed${Et}`;class Tt extends yt{static get NAME(){return"alert"}close(){if(ut.trigger(this._element,At).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),ut.trigger(this._element,kt),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=Tt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}wt(Tt,"close"),Ye(Tt);const Ct='[data-bs-toggle="button"]';class xt extends yt{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=xt.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}ut.on(document,"click.bs.button.data-api",Ct,(e=>{e.preventDefault();const t=e.target.closest(Ct);xt.getOrCreateInstance(t).toggle()})),Ye(xt);const Ot={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const i=[];let n=e.parentNode.closest(t);for(;n;)i.push(n),n=n.parentNode.closest(t);return i},prev(e,t){let i=e.previousElementSibling;for(;i;){if(i.matches(t))return[i];i=i.previousElementSibling}return[]},next(e,t){let i=e.nextElementSibling;for(;i;){if(i.matches(t))return[i];i=i.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!Be(e)&&He(e)))}},Lt=".bs.swipe",St=`touchstart${Lt}`,It=`touchmove${Lt}`,jt=`touchend${Lt}`,Dt=`pointerdown${Lt}`,$t=`pointerup${Lt}`,Nt={endCallback:null,leftCallback:null,rightCallback:null},Pt={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class Mt extends vt{constructor(e,t){super(),this._element=e,e&&Mt.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Nt}static get DefaultType(){return Pt}static get NAME(){return"swipe"}dispose(){ut.off(this._element,Lt)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),Xe(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&Xe(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(ut.on(this._element,Dt,(e=>this._start(e))),ut.on(this._element,$t,(e=>this._end(e))),this._element.classList.add("pointer-event")):(ut.on(this._element,St,(e=>this._start(e))),ut.on(this._element,It,(e=>this._move(e))),ut.on(this._element,jt,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const qt=".bs.carousel",Ht=".data-api",Bt="next",zt="prev",Ft="left",Wt="right",Rt=`slide${qt}`,Vt=`slid${qt}`,Ut=`keydown${qt}`,Yt=`mouseenter${qt}`,Xt=`mouseleave${qt}`,Kt=`dragstart${qt}`,Qt=`load${qt}${Ht}`,Gt=`click${qt}${Ht}`,Jt="carousel",Zt="active",ei=".active",ti=".carousel-item",ii=ei+ti,ni={ArrowLeft:Wt,ArrowRight:Ft},si={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},oi={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class ri extends yt{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Ot.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Jt&&this.cycle()}static get Default(){return si}static get DefaultType(){return oi}static get NAME(){return"carousel"}next(){this._slide(Bt)}nextWhenVisible(){!document.hidden&&He(this._element)&&this.next()}prev(){this._slide(zt)}pause(){this._isSliding&&Pe(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?ut.one(this._element,Vt,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void ut.one(this._element,Vt,(()=>this.to(e)));const i=this._getItemIndex(this._getActive());if(i===e)return;const n=e>i?Bt:zt;this._slide(n,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&ut.on(this._element,Ut,(e=>this._keydown(e))),"hover"===this._config.pause&&(ut.on(this._element,Yt,(()=>this.pause())),ut.on(this._element,Xt,(()=>this._maybeEnableCycle()))),this._config.touch&&Mt.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Ot.find(".carousel-item img",this._element))ut.on(e,Kt,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(Ft)),rightCallback:()=>this._slide(this._directionToOrder(Wt)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Mt(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=ni[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Ot.findOne(ei,this._indicatorsElement);t.classList.remove(Zt),t.removeAttribute("aria-current");const i=Ot.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);i&&(i.classList.add(Zt),i.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const i=this._getActive(),n=e===Bt,s=t||Qe(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=t=>ut.trigger(this._element,t,{relatedTarget:s,direction:this._orderToDirection(e),from:this._getItemIndex(i),to:o});if(r(Rt).defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",c=n?"carousel-item-next":"carousel-item-prev";s.classList.add(c),We(s),i.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(Zt),i.classList.remove(Zt,c,l),this._isSliding=!1,r(Vt)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Ot.findOne(ii,this._element)}_getItems(){return Ot.find(ti,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return Ue()?e===Ft?zt:Bt:e===Ft?Bt:zt}_orderToDirection(e){return Ue()?e===zt?Ft:Wt:e===zt?Wt:Ft}static jQueryInterface(e){return this.each((function(){const t=ri.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}ut.on(document,Gt,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=Ne(this);if(!t||!t.classList.contains(Jt))return;e.preventDefault();const i=ri.getOrCreateInstance(t),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===bt.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),ut.on(window,Qt,(()=>{const e=Ot.find('[data-bs-ride="carousel"]');for(const t of e)ri.getOrCreateInstance(t)})),Ye(ri);const ai=".bs.collapse",li=`show${ai}`,ci=`shown${ai}`,hi=`hide${ai}`,di=`hidden${ai}`,ui=`click${ai}.data-api`,fi="show",pi="collapse",mi="collapsing",gi=`:scope .${pi} .${pi}`,_i='[data-bs-toggle="collapse"]',bi={parent:null,toggle:!0},vi={parent:"(null|element)",toggle:"boolean"};class yi extends yt{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const i=Ot.find(_i);for(const e of i){const t=$e(e),i=Ot.find(t).filter((e=>e===this._element));null!==t&&i.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return bi}static get DefaultType(){return vi}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>yi.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(ut.trigger(this._element,li).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(pi),this._element.classList.add(mi),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(mi),this._element.classList.add(pi,fi),this._element.style[t]="",ut.trigger(this._element,ci)}),this._element,!0),this._element.style[t]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(ut.trigger(this._element,hi).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,We(this._element),this._element.classList.add(mi),this._element.classList.remove(pi,fi);for(const e of this._triggerArray){const t=Ne(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(mi),this._element.classList.add(pi),ut.trigger(this._element,di)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(fi)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=qe(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(_i);for(const t of e){const e=Ne(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Ot.find(gi,this._config.parent);return Ot.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const i of e)i.classList.toggle("collapsed",!t),i.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const i=yi.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e]()}}))}}ut.on(document,ui,_i,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=$e(this),i=Ot.find(t);for(const e of i)yi.getOrCreateInstance(e,{toggle:!1}).toggle()})),Ye(yi);const wi="dropdown",Ei=".bs.dropdown",Ai=".data-api",ki="ArrowUp",Ti="ArrowDown",Ci=`hide${Ei}`,xi=`hidden${Ei}`,Oi=`show${Ei}`,Li=`shown${Ei}`,Si=`click${Ei}${Ai}`,Ii=`keydown${Ei}${Ai}`,ji=`keyup${Ei}${Ai}`,Di="show",$i='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Ni=`${$i}.${Di}`,Pi=".dropdown-menu",Mi=Ue()?"top-end":"top-start",qi=Ue()?"top-start":"top-end",Hi=Ue()?"bottom-end":"bottom-start",Bi=Ue()?"bottom-start":"bottom-end",zi=Ue()?"left-start":"right-start",Fi=Ue()?"right-start":"left-start",Wi={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Ri={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Vi extends yt{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Ot.next(this._element,Pi)[0]||Ot.prev(this._element,Pi)[0]||Ot.findOne(Pi,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Wi}static get DefaultType(){return Ri}static get NAME(){return wi}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Be(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!ut.trigger(this._element,Oi,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))ut.on(e,"mouseover",Fe);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Di),this._element.classList.add(Di),ut.trigger(this._element,Li,e)}}hide(){if(Be(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!ut.trigger(this._element,Ci,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))ut.off(e,"mouseover",Fe);this._popper&&this._popper.destroy(),this._menu.classList.remove(Di),this._element.classList.remove(Di),this._element.setAttribute("aria-expanded","false"),bt.removeDataAttribute(this._menu,"popper"),ut.trigger(this._element,xi,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!Me(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${wi.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:Me(this._config.reference)?t=qe(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const i=this._getPopperConfig();this._popper=Se(t,this._menu,i)}_isShown(){return this._menu.classList.contains(Di)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return zi;if(e.classList.contains("dropstart"))return Fi;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?qi:Mi:t?Bi:Hi}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(bt.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const i=Ot.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>He(e)));i.length&&Qe(i,t,e===Ti,!i.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=Vi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Ot.find(Ni);for(const i of t){const t=Vi.getInstance(i);if(!t||!1===t._config.autoClose)continue;const n=e.composedPath(),s=n.includes(t._menu);if(n.includes(t._element)||"inside"===t._config.autoClose&&!s||"outside"===t._config.autoClose&&s)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const o={relatedTarget:t._element};"click"===e.type&&(o.clickEvent=e),t._completeHide(o)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),i="Escape"===e.key,n=[ki,Ti].includes(e.key);if(!n&&!i)return;if(t&&!i)return;e.preventDefault();const s=this.matches($i)?this:Ot.prev(this,$i)[0]||Ot.next(this,$i)[0]||Ot.findOne($i,e.delegateTarget.parentNode),o=Vi.getOrCreateInstance(s);if(n)return e.stopPropagation(),o.show(),void o._selectMenuItem(e);o._isShown()&&(e.stopPropagation(),o.hide(),s.focus())}}ut.on(document,Ii,$i,Vi.dataApiKeydownHandler),ut.on(document,Ii,Pi,Vi.dataApiKeydownHandler),ut.on(document,Si,Vi.clearMenus),ut.on(document,ji,Vi.clearMenus),ut.on(document,Si,$i,(function(e){e.preventDefault(),Vi.getOrCreateInstance(this).toggle()})),Ye(Vi);const Ui=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Yi=".sticky-top",Xi="padding-right",Ki="margin-right";class Qi{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Xi,(t=>t+e)),this._setElementAttributes(Ui,Xi,(t=>t+e)),this._setElementAttributes(Yi,Ki,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Xi),this._resetElementAttributes(Ui,Xi),this._resetElementAttributes(Yi,Ki)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,i){const n=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+n)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(e,t){const i=e.style.getPropertyValue(t);i&&bt.setDataAttribute(e,t,i)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const i=bt.getDataAttribute(e,t);null!==i?(bt.removeDataAttribute(e,t),e.style.setProperty(t,i)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(Me(e))t(e);else for(const i of Ot.find(e,this._element))t(i)}}const Gi="backdrop",Ji="show",Zi=`mousedown.bs.${Gi}`,en={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},tn={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class nn extends vt{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return en}static get DefaultType(){return tn}static get NAME(){return Gi}show(e){if(!this._config.isVisible)return void Xe(e);this._append();const t=this._getElement();this._config.isAnimated&&We(t),t.classList.add(Ji),this._emulateAnimation((()=>{Xe(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(Ji),this._emulateAnimation((()=>{this.dispose(),Xe(e)}))):Xe(e)}dispose(){this._isAppended&&(ut.off(this._element,Zi),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=qe(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),ut.on(e,Zi,(()=>{Xe(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){Ke(e,this._getElement(),this._config.isAnimated)}}const sn=".bs.focustrap",on=`focusin${sn}`,rn=`keydown.tab${sn}`,an="backward",ln={autofocus:!0,trapElement:null},cn={autofocus:"boolean",trapElement:"element"};class hn extends vt{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return ln}static get DefaultType(){return cn}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),ut.off(document,sn),ut.on(document,on,(e=>this._handleFocusin(e))),ut.on(document,rn,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,ut.off(document,sn))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const i=Ot.focusableChildren(t);0===i.length?t.focus():this._lastTabNavDirection===an?i[i.length-1].focus():i[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?an:"forward")}}const dn=".bs.modal",un=`hide${dn}`,fn=`hidePrevented${dn}`,pn=`hidden${dn}`,mn=`show${dn}`,gn=`shown${dn}`,_n=`resize${dn}`,bn=`click.dismiss${dn}`,vn=`mousedown.dismiss${dn}`,yn=`keydown.dismiss${dn}`,wn=`click${dn}.data-api`,En="modal-open",An="show",kn="modal-static",Tn={backdrop:!0,focus:!0,keyboard:!0},Cn={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class xn extends yt{constructor(e,t){super(e,t),this._dialog=Ot.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Qi,this._addEventListeners()}static get Default(){return Tn}static get DefaultType(){return Cn}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||ut.trigger(this._element,mn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(En),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(ut.trigger(this._element,un).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(An),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){for(const e of[window,this._dialog])ut.off(e,dn);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new nn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new hn({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Ot.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),We(this._element),this._element.classList.add(An),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,ut.trigger(this._element,gn,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){ut.on(this._element,yn,(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),ut.on(window,_n,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),ut.on(this._element,vn,(e=>{ut.one(this._element,bn,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(En),this._resetAdjustments(),this._scrollBar.reset(),ut.trigger(this._element,pn)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(ut.trigger(this._element,fn).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(kn)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(kn),this._queueCallback((()=>{this._element.classList.remove(kn),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),i=t>0;if(i&&!e){const e=Ue()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!i&&e){const e=Ue()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const i=xn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e](t)}}))}}ut.on(document,wn,'[data-bs-toggle="modal"]',(function(e){const t=Ne(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),ut.one(t,mn,(e=>{e.defaultPrevented||ut.one(t,pn,(()=>{He(this)&&this.focus()}))}));const i=Ot.findOne(".modal.show");i&&xn.getInstance(i).hide(),xn.getOrCreateInstance(t).toggle(this)})),wt(xn),Ye(xn);const On=".bs.offcanvas",Ln=".data-api",Sn=`load${On}${Ln}`,In="show",jn="showing",Dn="hiding",$n=".offcanvas.show",Nn=`show${On}`,Pn=`shown${On}`,Mn=`hide${On}`,qn=`hidePrevented${On}`,Hn=`hidden${On}`,Bn=`resize${On}`,zn=`click${On}${Ln}`,Fn=`keydown.dismiss${On}`,Wn={backdrop:!0,keyboard:!0,scroll:!1},Rn={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Vn extends yt{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Wn}static get DefaultType(){return Rn}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||ut.trigger(this._element,Nn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Qi).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(jn),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(In),this._element.classList.remove(jn),ut.trigger(this._element,Pn,{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(ut.trigger(this._element,Mn).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Dn),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(In,Dn),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Qi).reset(),ut.trigger(this._element,Hn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new nn({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():ut.trigger(this._element,qn)}:null})}_initializeFocusTrap(){return new hn({trapElement:this._element})}_addEventListeners(){ut.on(this._element,Fn,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():ut.trigger(this._element,qn))}))}static jQueryInterface(e){return this.each((function(){const t=Vn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}ut.on(document,zn,'[data-bs-toggle="offcanvas"]',(function(e){const t=Ne(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),Be(this))return;ut.one(t,Hn,(()=>{He(this)&&this.focus()}));const i=Ot.findOne($n);i&&i!==t&&Vn.getInstance(i).hide(),Vn.getOrCreateInstance(t).toggle(this)})),ut.on(window,Sn,(()=>{for(const e of Ot.find($n))Vn.getOrCreateInstance(e).show()})),ut.on(window,Bn,(()=>{for(const e of Ot.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&Vn.getOrCreateInstance(e).hide()})),wt(Vn),Ye(Vn);const Un=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Yn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Xn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Kn=(e,t)=>{const i=e.nodeName.toLowerCase();return t.includes(i)?!Un.has(i)||Boolean(Yn.test(e.nodeValue)||Xn.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(i)))},Qn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Gn={allowList:Qn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Jn={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Zn={entry:"(string|element|function|null)",selector:"(string|element)"};class es extends vt{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Gn}static get DefaultType(){return Jn}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,i]of Object.entries(this._config.content))this._setContent(e,i,t);const t=e.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&t.classList.add(...i.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,i]of Object.entries(e))super._typeCheckConfig({selector:t,entry:i},Zn)}_setContent(e,t,i){const n=Ot.findOne(i,e);n&&((t=this._resolvePossibleFunction(t))?Me(t)?this._putElementInTemplate(qe(t),n):this._config.html?n.innerHTML=this._maybeSanitize(t):n.textContent=t:n.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,i){if(!e.length)return e;if(i&&"function"==typeof i)return i(e);const n=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const e of s){const i=e.nodeName.toLowerCase();if(!Object.keys(t).includes(i)){e.remove();continue}const n=[].concat(...e.attributes),s=[].concat(t["*"]||[],t[i]||[]);for(const t of n)Kn(t,s)||e.removeAttribute(t.nodeName)}return n.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return"function"==typeof e?e(this):e}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const ts=new Set(["sanitize","allowList","sanitizeFn"]),is="fade",ns="show",ss=".modal",os="hide.bs.modal",rs="hover",as="focus",ls={AUTO:"auto",TOP:"top",RIGHT:Ue()?"left":"right",BOTTOM:"bottom",LEFT:Ue()?"right":"left"},cs={allowList:Qn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},hs={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class ds extends yt{constructor(t,i){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,i),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return cs}static get DefaultType(){return hs}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),ut.off(this._element.closest(ss),os,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=ut.trigger(this._element,this.constructor.eventName("show")),t=(ze(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),ut.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(ns),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))ut.on(e,"mouseover",Fe);this._queueCallback((()=>{ut.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!ut.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(ns),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))ut.off(e,"mouseover",Fe);this._activeTrigger.click=!1,this._activeTrigger[as]=!1,this._activeTrigger[rs]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),ut.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(is,ns),t.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",i),this._isAnimated()&&t.classList.add(is),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new es({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(is)}_isShown(){return this.tip&&this.tip.classList.contains(ns)}_createPopper(e){const t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,i=ls[t.toUpperCase()];return Se(this._element,e,this._getPopperConfig(i))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)ut.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===rs?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=t===rs?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");ut.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?as:rs]=!0,t._enter()})),ut.on(this._element,i,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?as:rs]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},ut.on(this._element.closest(ss),os,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=bt.getDataAttributes(this._element);for(const e of Object.keys(t))ts.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:qe(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=ds.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ye(ds);const us={...ds.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},fs={...ds.DefaultType,content:"(null|string|element|function)"};class ps extends ds{static get Default(){return us}static get DefaultType(){return fs}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=ps.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ye(ps);const ms=".bs.scrollspy",gs=`activate${ms}`,_s=`click${ms}`,bs=`load${ms}.data-api`,vs="active",ys="[href]",ws=".nav-link",Es=`${ws}, .nav-item > ${ws}, .list-group-item`,As={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},ks={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Ts extends yt{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return As}static get DefaultType(){return ks}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=qe(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(ut.off(this._config.target,_s),ut.on(this._config.target,_s,ys,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const i=this._rootElement||window,n=t.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),i=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of e){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(o));continue}const e=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&e){if(i(o),!n)return}else s||e||i(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Ot.find(ys,this._config.target);for(const t of e){if(!t.hash||Be(t))continue;const e=Ot.findOne(t.hash,this._element);He(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(vs),this._activateParents(e),ut.trigger(this._element,gs,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Ot.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(vs);else for(const t of Ot.parents(e,".nav, .list-group"))for(const e of Ot.prev(t,Es))e.classList.add(vs)}_clearActiveClass(e){e.classList.remove(vs);const t=Ot.find(`${ys}.${vs}`,e);for(const e of t)e.classList.remove(vs)}static jQueryInterface(e){return this.each((function(){const t=Ts.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ut.on(window,bs,(()=>{for(const e of Ot.find('[data-bs-spy="scroll"]'))Ts.getOrCreateInstance(e)})),Ye(Ts);const Cs=".bs.tab",xs=`hide${Cs}`,Os=`hidden${Cs}`,Ls=`show${Cs}`,Ss=`shown${Cs}`,Is=`click${Cs}`,js=`keydown${Cs}`,Ds=`load${Cs}`,$s="ArrowLeft",Ns="ArrowRight",Ps="ArrowUp",Ms="ArrowDown",qs="active",Hs="fade",Bs="show",zs=":not(.dropdown-toggle)",Fs='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Ws=`.nav-link${zs}, .list-group-item${zs}, [role="tab"]${zs}, ${Fs}`,Rs=`.${qs}[data-bs-toggle="tab"], .${qs}[data-bs-toggle="pill"], .${qs}[data-bs-toggle="list"]`;class Vs extends yt{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),ut.on(this._element,js,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),i=t?ut.trigger(t,xs,{relatedTarget:e}):null;ut.trigger(e,Ls,{relatedTarget:t}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){e&&(e.classList.add(qs),this._activate(Ne(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),ut.trigger(e,Ss,{relatedTarget:t})):e.classList.add(Bs)}),e,e.classList.contains(Hs)))}_deactivate(e,t){e&&(e.classList.remove(qs),e.blur(),this._deactivate(Ne(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),ut.trigger(e,Os,{relatedTarget:t})):e.classList.remove(Bs)}),e,e.classList.contains(Hs)))}_keydown(e){if(![$s,Ns,Ps,Ms].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[Ns,Ms].includes(e.key),i=Qe(this._getChildren().filter((e=>!Be(e))),e.target,t,!0);i&&(i.focus({preventScroll:!0}),Vs.getOrCreateInstance(i).show())}_getChildren(){return Ot.find(Ws,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),i=this._getOuterElement(e);e.setAttribute("aria-selected",t),i!==e&&this._setAttributeIfNotExists(i,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=Ne(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const i=this._getOuterElement(e);if(!i.classList.contains("dropdown"))return;const n=(e,n)=>{const s=Ot.findOne(e,i);s&&s.classList.toggle(n,t)};n(".dropdown-toggle",qs),n(".dropdown-menu",Bs),i.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,i){e.hasAttribute(t)||e.setAttribute(t,i)}_elemIsActive(e){return e.classList.contains(qs)}_getInnerElement(e){return e.matches(Ws)?e:Ot.findOne(Ws,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=Vs.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ut.on(document,Is,Fs,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),Be(this)||Vs.getOrCreateInstance(this).show()})),ut.on(window,Ds,(()=>{for(const e of Ot.find(Rs))Vs.getOrCreateInstance(e)})),Ye(Vs);const Us=".bs.toast",Ys=`mouseover${Us}`,Xs=`mouseout${Us}`,Ks=`focusin${Us}`,Qs=`focusout${Us}`,Gs=`hide${Us}`,Js=`hidden${Us}`,Zs=`show${Us}`,eo=`shown${Us}`,to="hide",io="show",no="showing",so={animation:"boolean",autohide:"boolean",delay:"number"},oo={animation:!0,autohide:!0,delay:5e3};class ro extends yt{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return oo}static get DefaultType(){return so}static get NAME(){return"toast"}show(){ut.trigger(this._element,Zs).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(to),We(this._element),this._element.classList.add(io,no),this._queueCallback((()=>{this._element.classList.remove(no),ut.trigger(this._element,eo),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(ut.trigger(this._element,Gs).defaultPrevented||(this._element.classList.add(no),this._queueCallback((()=>{this._element.classList.add(to),this._element.classList.remove(no,io),ut.trigger(this._element,Js)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(io),super.dispose()}isShown(){return this._element.classList.contains(io)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const i=e.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){ut.on(this._element,Ys,(e=>this._onInteraction(e,!0))),ut.on(this._element,Xs,(e=>this._onInteraction(e,!1))),ut.on(this._element,Ks,(e=>this._onInteraction(e,!0))),ut.on(this._element,Qs,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=ro.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}function ao(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};e.src=t,e.alt=i,n(e)}wt(ro),Ye(ro),i(607);const lo=i.p+"profile-cut.b1686ee6f78c51b4c5ec.png",co=i.p+"avatar-about.dd144bd6ca1efae261b3.png";function ho(e){return ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ho(e)}function uo(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,s=function(e,t){if("object"!==ho(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var n=i.call(e,"string");if("object"!==ho(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===ho(s)?s:String(s)),n)}var s}function fo(e,t,i){return t&&uo(e.prototype,t),i&&uo(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}i.p,ao(document.querySelector(".avatar"),lo,void 0,(function(e){e.draggable=!1})),ao(document.querySelector(".avatar-about"),co,void 0,(function(e){e.draggable=!1})),i(958);var po=fo((function e(t,i,n,s,o,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.desktopUrl=i,this.mobileUrl=n,this.title=s,this.bodyText=o,this.siteUrl=r,this.sourceUrl=a}));const mo=i.p+"desktop.04eb1de450d6e1eb853f.jpg",go=i.p+"mobile-1.5f6a1d7914806734bf56.jpg",_o=i.p+"desktop.78546e56c37cb3687005.jpg",bo=i.p+"mobile-1.bc535b25519122011a52.jpg",vo=i.p+"desktop.1781815729180b0f2ee2.jpg",yo=i.p+"mobile-1.72e305c1e3ecff51c396.jpg",wo=i.p+"desktop.6fb82d29c4d7ccd65aca.jpg",Eo=i.p+"mobile-1.891bfcf24bc46ce2ae87.jpg",Ao=(i.p,i.p,i.p,i.p,i.p+"desktop.1e04995ca2272f50fce8.jpg"),ko=i.p+"mobile-1.383c6f55f2653c8bb919.jpg",To=i.p+"desktop.c881d5a5e91805e9c5cf.jpg",Co=i.p+"mobile-1.d06f1ca799fef27914e6.jpg",xo=i.p+"desktop.8defdea0ddfc51924730.jpg",Oo=i.p+"mobile-1.fa4a7f8f928b9e459f32.jpg",Lo=i.p+"desktop.bda007023ee8033d3bb7.jpg",So=i.p+"mobile-1.5d513d1b74a86ba6a1d5.jpg",Io=i.p+"desktop.d20ae47664efd48cd545.jpg",jo=i.p+"mobile-1.36f1dbd1deb7517de115.jpg";var Do=[],$o=new po(0,xo,Oo,"Art Cafe Store",["As a passionate developer, I recently built an e-commerce website using Next.js and Strapi, with payment processing powered by Stripe. The website specializes in selling coffee machine parts, refurbished coffee machines, and offers repair services for coffee machines.","To make the site easy to navigate, I designed a clean and intuitive user interface, with a prominent instant search box built with meilisearch  that allows users to quickly search for specific products or browse by category.","I built out the Coffee Machine Parts section with a wide selection of parts for different types of coffee machines. Each product page includes high-quality images, detailed descriptions, and customer reviews to help users make informed purchasing decisions.","To make it easy for customers to schedule a repair, I built out the Repair Services section, which offers a variety of services, from basic maintenance to troubleshooting and repairs. The Reparo Estimate section features a simple quiz to estimate the cost of repairing a broken coffee machine.","To handle payment processing, I integrated Stripe into the site's checkout process, ensuring that customer payment information is kept secure.","Ah, I almost forgot to mention that I also integrated instant search functionality into the e-commerce website using MeiliSearch. This means that customers can quickly and easily find the products they're looking for with just a few keystrokes.","Overall, building this e-commerce website was a challenging and rewarding project. I was able to leverage Next.js and Strapi to create a fast, responsive, and user-friendly website that meets the needs of coffee machine enthusiasts everywhere.","Thanks to MeiliSearch's lightning-fast search algorithms and real-time indexing, customers can see search results as they type, making it easy to quickly refine their search and find exactly what they're looking for.","Overall, integrating instant search functionality using MeiliSearch was a great addition to the e-commerce website, improving the user experience and making it even easier for customers to find the products they need."],"https://www.artcafe.store","https://github.com/nate-mal"),No=new po(1,Io,jo,"Simple blog",["As a passionate dev I whipped up a sweet little blog using Next.js. It's a pretty basic setup with two pages - one for the featured posts and one for all the posts.","The site itself is pretty straightforward, with a clean and easy-to-use design. Navigation is simple and intuitive, so folks won't get lost trying to find what they're looking for.","I used Next.js to build the blog because it's super fast and efficient. It's perfect for a blog like this because it loads quickly and keeps things running smoothly. Plus, Next.js makes it easy to generate the site statically, which is great for SEO and performance.","Overall, I'm stoked with how this little blog turned out. It's a great showcase of what you can do with Next.js, and I'm sure it'll be a hit with readers!"],"https://next-blog-gray-eta.vercel.app/posts/","https://github.com/nate-mal/next-blog/tree/master"),Po=new po(2,Lo,So,"Restaurant Menu",["I recently worked on building a restaurant menu website that includes a number of great features to make it easy for customers to browse the menu, place orders, and communicate with the waitstaff.","One of the key features of the website is the ability to filter products by category or search by name. Customers can easily navigate to specific sections of the menu, such as entrees or desserts, or they can use the search bar to quickly find their favorite dishes.","Once a customer has selected the items they want to order, they can send their order directly to the waiter or waitress assigned to their table. This feature helps to streamline the ordering process and minimize wait times, allowing customers to enjoy their meals without unnecessary delays.","To make the website as user-friendly as possible, I designed a clean and intuitive user interface that's easy to navigate on any device. Whether customers are using a desktop computer, tablet, or smartphone, they can easily browse the menu, place orders, and communicate with the waitstaff.","Overall, building this restaurant menu website was a fun and rewarding project. By including features like category filters, search functionality, and direct ordering, we were able to create a seamless and enjoyable dining experience for customers."],"https://next-food-menu.vercel.app","https://github.com/nate-mal/next-food-menu/tree/master"),Mo=new po(3,wo,Eo," Interactive Photo Gallery",["In this project I’ve  created an interactive photo gallery using JavaScript and CSS Grid Layout. At the top of the page is a search area where photos will hide and show depending on user input. ",'When the user clicks on a thumbnail, the photo will display in a lightbox where are "back" and "previous" arrows to cycle through photos.'],"https://nate-mal.github.io/photo-gallery/","https://github.com/nate-mal/photo-gallery"),qo=new po(4,Ao,ko,"Next Events",["The website is designed to showcase upcoming events in a variety of categories, such as concerts, festivals, and cultural events. Each event is highlighted with a high-quality image, a brief description, and relevant details like the date and location.","One of the key features of the website is its easy-to-use search function. Visitors can easily search for events by date.","To make the website as user-friendly as possible, I designed a clean and intuitive user interface that's easy to navigate on any device. The website is optimized for mobile devices, so users can browse events and read articles on the go.","Overall, building this website was a fun and rewarding project. By including features like a robust search function, high-quality images, and informative blog content, I was able to create a site that's both useful and engaging for visitors."],"https://next-events-vert.vercel.app/events/","https://github.com/nate-mal/next-events/"),Ho=new po(5,To,Co,"About this project",["Many websites do more than just give you information. Sites like GitHub, Zillow, Mint and Facebook let users do things. They act like programs you run on your computer. These web applications, often include pages for looking at your profile, what you've done in the week or what you need to get done.","In this project I’ve  took  a mockup and a few icons and built a beautiful, web dashboard complete with JavaScript-driven charts and graphs. "],"https://nate-mal.github.io/web_app_dashboard/","https://github.com/nate-mal/web_app_dashboard/"),Bo=new po(6,mo,go,"Api employee directory",["Communicating with APIs allows you to work with microservices and with vast databases to build useful tools and relevant information quickly and easily. You can build utilities, games, infographics, and more. You can also integrate, display, and analyze social media and large data sets without having to create and curate them yourself.","For this project, I’ve build an app for a fictional company called Awesome Startup, a distributed company with remote employees working all over the world. They need a smart way for employees to share contact information with each other."],"https://nate-mal.github.io/employee_directory/","https://github.com/nate-mal/employee_directory"),zo=new po(7,vo,yo,"Online Form",['In this project I’ve  created a responsive, mobile-friendly registration form using a wide variety of HTML form input types and attributes, a "mobile-first" approach.',"This is an old project although 😅"],"https://nate-mal.github.io/online_registration_form/","https://github.com/nate-mal/online_registration_form"),Fo=new po(8,_o,bo,"Oop Game Show App",['In this project I’ve created a browser-based, word guessing game: "Phrase Hunter." I’ve used JavaScript and OOP (Object-Oriented Programming) to select a random, hidden phrase, which a player tries to guess, by clicking letters on an onscreen keyboard.',"Each time the player guesses a letter, the program compares the letter the player has chosen with the random phrase. If the letter is in the phrase, the gameboard displays the chosen letters on the screen."],"https://nate-mal.github.io/game_show_app/","https://github.com/nate-mal/game_show_app");Do.push($o),Do.push(No),Do.push(Po),Do.push(Mo),Do.push(qo),Do.push(Ho),Do.push(Bo),Do.push(zo),Do.push(Fo),function(e,t){var i,n=document.querySelector("#portfolio-content"),s=t;(function(){var e=document.createElement("div");e.classList.add("container");var t=document.createElement("div");return t.classList.add("row"),e.appendChild(t),n.appendChild(e),s.forEach((function(e){!function(e){var t=n.querySelector(".row"),i=document.createElement("img");i.classList.add("portfolio-image");var s=document.createElement("a");s.href="#portfolio",s.classList.add("portfolio-item","col-12","col-md-6","col-lg-4"),s.appendChild(i),t.appendChild(s),ao(i,e.desktopUrl,e.desktopUrl,(function(t){return t.id=e.id}))}(e)})),Promise.resolve()})().then((i=function e(t){var i=s.find((function(e){return e.id==t})),o=n.querySelector(".row"),r=document.createElement("a");r.href="#".concat(i.id),r.classList.add("command-btn","menu"),r.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-arrow-left-circle" viewBox="0 0 16 16">\n        <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z"/>\n      </svg>';var a=document.createElement("a");a.href="#portfolio",a.classList.add("command-btn","slide","slide-left"),a.innerHTML=' <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">\n      <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>\n    </svg>';var l=document.createElement("a");l.href="#portfolio",l.classList.add("command-btn","slide","slide-right"),l.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">\n    <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>\n  </svg>';var c=document.createElement("div");c.classList.add("command-panel","col-12"),c.appendChild(r),c.appendChild(a),c.appendChild(l);var h,d,u,f,p=document.createElement("img"),m=document.createElement("img"),g=document.createElement("div"),_=document.createElement("div"),b=document.createElement("div"),v=document.createElement("div");v.id="showTime",v.classList.add("show-container","row"),o.insertBefore(v,document.getElementById(t).parentNode),v.appendChild(c),v.appendChild(_),v.appendChild(g),v.appendChild(b),g.classList.add("portfolio-show-item","description","col-12","col-lg-6"),g.innerHTML=(h=i.title,d=i.bodyText,u=i.siteUrl,f=i.sourceUrl,'\n <div class="d-flex flex-column justify-content-lg-center mt-2 mb-5 hero-text-group" style="z-index: 9;">\n              <h1 class="display-5">'.concat(h,'</h1>\n               <p class="lead">').concat(d[0],'</p>\n               <p class="lead">').concat(d.length>1?d[1]:"",'</p>\n               <p class="lead">').concat(d.length>2?d[2]:"",'</p>\n               <p class="lead">').concat(d.length>3?d[3]:"",'</p>\n               <p class="lead">').concat(d.length>4?d[4]:"",'</p>\n               <p class="lead">').concat(d.length>5?d[5]:"",'</p>\n               <p class="lead">').concat(d.length>6?d[6]:"",'</p>\n              \n              <div\n                class="\n                  d-flex\n                  flex-column\n                  align-items-center align-items-md-start\n                "\n              >\n                <div class="mb-5">\n                  <a href="').concat(u,'" target="_blank" class="btn btn-danger btn-lg m-1">\n                    Live Website\n                  </a>\n                  <a href="').concat(f,'" target="_blank"\n                    \n                    class="btn btn-outline-danger btn-lg m-1"\n                  >\n                  <svg\n                  xmlns="http://www.w3.org/2000/svg"\n                  width="16"\n                  height="16"\n                  fill="currentColor"\n                  class="bi bi-github"\n                  viewBox="0 0 16 16"\n                >\n                  <path\n                    d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"\n                  />\n                </svg>\n                    View Source\n              </a>\n                </div>\n                <div style="height:7em"></div>\n              </div>\n              \n              </div>\n             \n              ')),_.classList.add("portfolio-show-item","mobile","col-12","col-lg-4"),_.appendChild(m),b.classList.add("portfolio-show-item","desktop","col-12","col-lg-12"),b.appendChild(p),ao(p,i.desktopUrl),ao(m,i.mobileUrl),r.addEventListener("click",(function(){o.removeChild(v),n.querySelectorAll(".portfolio-item").forEach((function(e){e.classList.remove("selected")})),n.classList.remove("show")})),i!==s[0]?a.addEventListener("click",(function(){o.removeChild(v),e(i.id-1)})):a.style.display="none",i!==s[s.length-1]?l.addEventListener("click",(function(){o.removeChild(v),e(i.id+1)})):l.style.display="none"},void n.addEventListener("click",(function(e){if(e.target.classList.contains("portfolio-image")){s=n.querySelectorAll(".portfolio-item"),n.classList.contains("show")&&n.classList.remove("show"),s.forEach((function(e){e.classList.remove("selected")})),n.classList.add("show");var t=e.target.parentNode;return t.classList.add("selected"),i(e.target.id),Promise.resolve(t.id)}var s}))))}(0,Do)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,